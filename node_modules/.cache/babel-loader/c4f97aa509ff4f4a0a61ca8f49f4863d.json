{"ast":null,"code":"/**\n * Webhook instances\n * @namespace Webhook\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n/**\n * @memberof Webhook\n * @typedef Webhook\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} url - Url which the webhook will call\n * @prop {string} httpBasicUsername - Username for basic HTTP authentication\n * @prop {string} httpBasicPassword - Password for basic HTTP authentication\n * @prop {object} headers - Key value pairs of additional headers to be sent with every webhook call.\n * @prop {array} topics - Topics which this webhook should be subscribed to. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhooks/create-a-webhook for more details\n * @prop {function(): Object} toPlainObject() - Returns this Webhook as a plain JS object\n */\n\nfunction createWebhookApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Webhook\n     * @func update\n     * @return {Promise<Webhook>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => {\n     *  webhook.name = 'new webhook name'\n     *  return webhook.update()\n     * })\n     * .then((webhook) => console.log(`webhook ${webhook.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'webhook_definitions',\n      wrapperMethod: wrapWebhook\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Webhook\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.delete())\n     * .then((webhook) => console.log(`webhook ${webhook.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'webhook_definitions'\n    }),\n\n    /**\n     * List of the most recent webhook calls. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details.\n     * @memberof Webhook\n     * @func getCalls\n     * @return {Promise<object>} Promise for list of calls\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.getCalls())\n     * .then((response) => console.log(response.items)) // webhook calls\n     * .catch(console.error)\n     */\n    getCalls: function getCalls() {\n      return http.get('webhooks/' + this.sys.id + '/calls').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n\n    /**\n     * Webhook call with specific id. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details\n     * @memberof Webhook\n     * @func getCalls\n     * @return {Promise<object>} Promise for call details\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.getCall(<call-id>))\n     * .then((webhookCall) => console.log(webhookCall))\n     * .catch(console.error)\n     */\n    getCall: function getCall(id) {\n      return http.get('webhooks/' + this.sys.id + '/calls/' + id).then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n\n    /**\n     * Overview of the health of webhook calls. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details.\n     * @memberof Webhook\n     * @func getHealth\n     * @return {Promise<object>} Promise for health info\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.getHealth())\n     * .then((webhookHealth) => console.log(webhookHealth))\n     * .catch(console.error)\n     */\n    getHealth: function getHealth() {\n      return http.get('webhooks/' + this.sys.id + '/health').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    }\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw webhook data\n * @return {Webhook} Wrapped webhook data\n */\n\n\nexport function wrapWebhook(http, data) {\n  var webhook = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(webhook, createWebhookApi(http));\n  return freezeSys(webhook);\n}\n/**\n * @memberof Webhook\n * @typedef WebhookCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Webhook.Webhook>} items\n * @prop {function(): Object} toPlainObject() - Returns this Webhook collection as a plain JS object\n */\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw webhook collection data\n * @return {WebhookCollection} Wrapped webhook collection data\n */\n\nexport function wrapWebhookCollection(http, data) {\n  var webhooks = toPlainObject(cloneDeep(data));\n  webhooks.items = webhooks.items.map(function (entity) {\n    return wrapWebhook(http, entity);\n  });\n  return freezeSys(webhooks);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/webhook.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","errorHandler","createUpdateEntity","createDeleteEntity","createWebhookApi","http","update","entityPath","wrapperMethod","wrapWebhook","delete","getCalls","get","sys","id","then","response","data","getCall","getHealth","webhook","wrapWebhookCollection","webhooks","items","map","entity"],"mappings":"AAAA;;;;AAIA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AAEA;;;;;;;;;;;;;AAaA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAO;AAEL;;;;;;;;;;;;;;;;;;;;;AAqBAC,IAAAA,MAAM,EAAEJ,kBAAkB,CAAC;AACzBG,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE,qBAFa;AAGzBC,MAAAA,aAAa,EAAEC;AAHU,KAAD,CAvBrB;;AA6BL;;;;;;;;;;;;;;;;;;AAkBAC,IAAAA,MAAM,EAAEP,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE;AAFa,KAAD,CA/CrB;;AAoDL;;;;;;;;;;;;;;;;;;AAkBAI,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,aAAON,IAAI,CAACO,GAAL,CAAS,cAAc,KAAKC,GAAL,CAASC,EAAvB,GAA4B,QAArC,EAA+CC,IAA/C,CAAoD,UAAUC,QAAV,EAAoB;AAC7E,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAFM,EAEJhB,YAFI,CAAP;AAGD,KA1EI;;AA4EL;;;;;;;;;;;;;;;;;;AAkBAiB,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBJ,EAAjB,EAAqB;AAC5B,aAAOT,IAAI,CAACO,GAAL,CAAS,cAAc,KAAKC,GAAL,CAASC,EAAvB,GAA4B,SAA5B,GAAwCA,EAAjD,EAAqDC,IAArD,CAA0D,UAAUC,QAAV,EAAoB;AACnF,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAFM,EAEJhB,YAFI,CAAP;AAGD,KAlGI;;AAoGL;;;;;;;;;;;;;;;;;;AAkBAkB,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAOd,IAAI,CAACO,GAAL,CAAS,cAAc,KAAKC,GAAL,CAASC,EAAvB,GAA4B,SAArC,EAAgDC,IAAhD,CAAqD,UAAUC,QAAV,EAAoB;AAC9E,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAFM,EAEJhB,YAFI,CAAP;AAGD;AA1HI,GAAP;AA4HD;AAED;;;;;;;;AAMA,OAAO,SAASQ,WAAT,CAAqBJ,IAArB,EAA2BY,IAA3B,EAAiC;AACtC,MAAIG,OAAO,GAAGrB,aAAa,CAACF,SAAS,CAACoB,IAAD,CAAV,CAA3B;AACAjB,EAAAA,kBAAkB,CAACoB,OAAD,EAAUhB,gBAAgB,CAACC,IAAD,CAA1B,CAAlB;AACA,SAAOP,SAAS,CAACsB,OAAD,CAAhB;AACD;AAED;;;;;;;;;;AAUA;;;;;;;AAMA,OAAO,SAASC,qBAAT,CAA+BhB,IAA/B,EAAqCY,IAArC,EAA2C;AAChD,MAAIK,QAAQ,GAAGvB,aAAa,CAACF,SAAS,CAACoB,IAAD,CAAV,CAA5B;AACAK,EAAAA,QAAQ,CAACC,KAAT,GAAiBD,QAAQ,CAACC,KAAT,CAAeC,GAAf,CAAmB,UAAUC,MAAV,EAAkB;AACpD,WAAOhB,WAAW,CAACJ,IAAD,EAAOoB,MAAP,CAAlB;AACD,GAFgB,CAAjB;AAGA,SAAO3B,SAAS,CAACwB,QAAD,CAAhB;AACD","sourcesContent":["/**\n * Webhook instances\n * @namespace Webhook\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n\n/**\n * @memberof Webhook\n * @typedef Webhook\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} url - Url which the webhook will call\n * @prop {string} httpBasicUsername - Username for basic HTTP authentication\n * @prop {string} httpBasicPassword - Password for basic HTTP authentication\n * @prop {object} headers - Key value pairs of additional headers to be sent with every webhook call.\n * @prop {array} topics - Topics which this webhook should be subscribed to. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhooks/create-a-webhook for more details\n * @prop {function(): Object} toPlainObject() - Returns this Webhook as a plain JS object\n */\n\nfunction createWebhookApi(http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Webhook\n     * @func update\n     * @return {Promise<Webhook>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => {\n     *  webhook.name = 'new webhook name'\n     *  return webhook.update()\n     * })\n     * .then((webhook) => console.log(`webhook ${webhook.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'webhook_definitions',\n      wrapperMethod: wrapWebhook\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Webhook\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.delete())\n     * .then((webhook) => console.log(`webhook ${webhook.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'webhook_definitions'\n    }),\n\n    /**\n     * List of the most recent webhook calls. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details.\n     * @memberof Webhook\n     * @func getCalls\n     * @return {Promise<object>} Promise for list of calls\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.getCalls())\n     * .then((response) => console.log(response.items)) // webhook calls\n     * .catch(console.error)\n     */\n    getCalls: function getCalls() {\n      return http.get('webhooks/' + this.sys.id + '/calls').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n\n    /**\n     * Webhook call with specific id. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details\n     * @memberof Webhook\n     * @func getCalls\n     * @return {Promise<object>} Promise for call details\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.getCall(<call-id>))\n     * .then((webhookCall) => console.log(webhookCall))\n     * .catch(console.error)\n     */\n    getCall: function getCall(id) {\n      return http.get('webhooks/' + this.sys.id + '/calls/' + id).then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n\n    /**\n     * Overview of the health of webhook calls. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details.\n     * @memberof Webhook\n     * @func getHealth\n     * @return {Promise<object>} Promise for health info\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => webhook.getHealth())\n     * .then((webhookHealth) => console.log(webhookHealth))\n     * .catch(console.error)\n     */\n    getHealth: function getHealth() {\n      return http.get('webhooks/' + this.sys.id + '/health').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    }\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw webhook data\n * @return {Webhook} Wrapped webhook data\n */\nexport function wrapWebhook(http, data) {\n  var webhook = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(webhook, createWebhookApi(http));\n  return freezeSys(webhook);\n}\n\n/**\n * @memberof Webhook\n * @typedef WebhookCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Webhook.Webhook>} items\n * @prop {function(): Object} toPlainObject() - Returns this Webhook collection as a plain JS object\n */\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw webhook collection data\n * @return {WebhookCollection} Wrapped webhook collection data\n */\nexport function wrapWebhookCollection(http, data) {\n  var webhooks = toPlainObject(cloneDeep(data));\n  webhooks.items = webhooks.items.map(function (entity) {\n    return wrapWebhook(http, entity);\n  });\n  return freezeSys(webhooks);\n}"]},"metadata":{},"sourceType":"module"}