{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Contentful Environment API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n * @namespace ContentfulEnvironmentAPI\n */\n\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n/**\n * @memberof ContentfulEnvironmentAPI\n * @typedef {object} ContentfulEnvironmentAPI\n * @prop {function} delete\n * @prop {function} update\n * @prop {function} getContentType\n * @prop {function} getContentTypes\n * @prop {function} createContentType\n * @prop {function} createContentTypeWithId\n * @prop {function} getEntry\n * @prop {function} getEntries\n * @prop {function} createEntry\n * @prop {function} createEntryWithId\n * @prop {function} getAsset\n * @prop {function} getAssets\n * @prop {function} createAsset\n * @prop {function} createAssetWithId\n * @prop {function} getLocale\n * @prop {function} getLocales\n * @prop {function} createLocale\n * @prop {function} getUiExtension\n * @prop {function} getUiExtensions\n * @prop {function} createUiExtension\n * @prop {function} createUiExtensionWithId\n * @prop {function} getEntrySnapshots\n * @prop {function} getContentTypeSnapshots\n */\n\n/**\n * Creates API object with methods to access the Environment API\n * @private\n * @param {object} params - API initialization params\n * @prop {object} http - HTTP client instance\n * @prop {object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulEnvironmentAPI}\n */\n\nexport default function createEnvironmentApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapEnvironment = entities.environment.wrapEnvironment;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  /**\n   * Environment instances.\n   * @namespace Environment\n   */\n\n  /**\n   * Deletes the environment\n   * @memberof Environment\n   * @func delete\n   * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.delete())\n   * .then(() => console.log('Environment deleted.'))\n   * .catch(console.error)\n  */\n\n  function deleteEnvironment() {\n    return http.delete('').then(function (response) {}, errorHandler);\n  }\n  /**\n   * Updates the environment\n   * @memberof Environment\n   * @func update\n   * @return {Promise<Environment.Environment>} Promise for the updated environment.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => {\n   *   environment.name = 'New name'\n   *   return environment.update()\n   * })\n   * .then((environment) => console.log(`Environment ${environment.sys.id} renamed.`)\n   * .catch(console.error)\n  */\n\n\n  function updateEnvironment() {\n    var raw = this.toPlainObject();\n    var data = cloneDeep(raw);\n    delete data.sys;\n    return http.put('', data, {\n      headers: {\n        'X-Contentful-Version': raw.sys.version\n      }\n    }).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Content Type ID\n   * @return {Promise<ContentType.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getContentType('<content_type_id>'))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n\n\n  function getContentType(id) {\n    return http.get('content_types/' + id).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an EditorInterface for a ContentType\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} contentTypeId - Content Type ID\n   * @return {Promise<EditorInterface.EditorInterface>} Promise for an EditorInterface\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEditorInterfaceForContentType('<content_type_id>'))\n   * .then((EditorInterface) => console.log(EditorInterface))\n   * .catch(console.error)\n   */\n\n\n  function getEditorInterfaceForContentType(contentTypeId) {\n    return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n      return wrapEditorInterface(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<ContentType.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getContentTypes())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getContentTypes() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return http.get('content_types', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapContentTypeCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Content Type\n   * @memberof ContentfulEnvironmentAPI\n   * @see {ContentType}\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createContentType({\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n\n\n  function createContentType(data) {\n    return http.post('content_types', data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Content Type with a custom ID\n   * @memberof ContentfulEnvironmentAPI\n   * @see {ContentType.ContentType}\n   * @param {string} id - Content Type ID\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createContentTypeWithId('<content-type-id>', {\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n\n\n  function createContentTypeWithId(id, data) {\n    return http.put('content_types/' + id, data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an Entry\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Entry ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entry.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEntry('<entry-id>'))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n\n\n  function getEntry(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    normalizeSelect(query);\n    return http.get('entries/' + id, createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Entries\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entry.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getEntries() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    normalizeSelect(query);\n    return http.get('entries', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapEntryCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Entry\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type ID of the newly created Entry\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createEntry('<content_type_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n\n\n  function createEntry(contentTypeId, data) {\n    return http.post('entries', data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Entry with a custom ID\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type of the newly created Entry\n   * @param {string} id - Entry ID\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create entry\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createEntryWithId('<content_type_id>', '<entry_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n\n\n  function createEntryWithId(contentTypeId, id, data) {\n    return http.put('entries/' + id, data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an Asset\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Asset ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Asset.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getAsset('<asset_id>'))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n  */\n\n\n  function getAsset(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    normalizeSelect(query);\n    return http.get('assets/' + id, createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Assets\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Asset.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getAssets())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getAssets() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    normalizeSelect(query);\n    return http.get('assets', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapAssetCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createAsset({\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Playsam Streamliner'\n   *    },\n   *    file: {\n   *       'en-US': {\n   *         contentType: 'image/jpeg',\n   *        fileName: 'example.jpeg',\n   *        upload: 'https://example.com/example.jpg'\n   *      }\n   *    }\n   *   }\n   * }))\n   * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n\n\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Asset.Asset}\n   * @param {string} id - Asset ID\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createAssetWithId('<asset_id>', {\n   *   title: {\n   *     'en-US': 'Playsam Streamliner'\n   *   },\n   *   file: {\n   *     'en-US': {\n   *       contentType: 'image/jpeg',\n   *       fileName: 'example.jpeg',\n   *       upload: 'https://example.com/example.jpg'\n   *     }\n   *   }\n   * }))\n   * .then((asset) => asset.process())\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n\n\n  function createAssetWithId(id, data) {\n    return http.put('assets/' + id, data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @param {object} data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createAssetFromFiles({\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          file: createReadStream('path/to/filename_english.jpg')\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/svg+xml',\n   *          fileName: 'filename_german.svg',\n   *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n   *       }\n   *     }\n   *   }\n   * }))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n\n\n  function createAssetFromFiles(data) {\n    var file = data.fields.file;\n    return Promise.all(Object.keys(file).map(function (locale) {\n      var _file$locale = file[locale],\n          contentType = _file$locale.contentType,\n          fileName = _file$locale.fileName;\n      return createUpload(file[locale]).then(function (upload) {\n        return _defineProperty({}, locale, {\n          contentType: contentType,\n          fileName: fileName,\n          uploadFrom: {\n            sys: {\n              type: 'Link',\n              linkType: 'Upload',\n              id: upload.sys.id\n            }\n          }\n        });\n      });\n    })).then(function (uploads) {\n      data.fields.file = uploads.reduce(function (fieldsData, upload) {\n        return _extends({}, fieldsData, upload);\n      }, {});\n      return createAsset(data);\n    }).catch(errorHandler);\n  }\n  /**\n   * Creates a Upload.\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object} data - Object with file information.\n   * @param {object} data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Upload>} Upload object containing information about the uploaded file.\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createUpload({file: uploadStream})\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n\n\n  function createUpload(data) {\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    }).catch(errorHandler);\n  }\n  /**\n   * Gets an Upload\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Upload ID\n   * @return {Promise<Upload>} Promise for an Upload\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getUpload('<upload-id>')\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n\n\n  function getUpload(id) {\n    return httpUpload.get('uploads/' + id).then(function (response) {\n      return wrapUpload(http, response.data);\n    }).catch(errorHandler);\n  }\n  /**\n   * Gets a Locale\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Locale ID\n   * @return {Promise<Locale.Locale>} Promise for an Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getLocale('<locale_id>'))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n  */\n\n\n  function getLocale(id) {\n    return http.get('locales/' + id).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Locales\n   * @memberof ContentfulEnvironmentAPI\n   * @return {Promise<Locale.LocaleCollection>} Promise for a collection of Locales\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getLocales())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getLocales() {\n    return http.get('locales').then(function (response) {\n      return wrapLocaleCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Locale\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Locale.Locale}\n   * @param {object} data - Object representation of the Locale to be created\n   * @return {Promise<Locale.Locale>} Promise for the newly created Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create locale\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createLocale({\n   *   name: 'German (Austria)',\n   *   code: 'de-AT',\n   *   fallbackCode: 'de-DE',\n   *   optional: true\n   * }))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n   */\n\n\n  function createLocale(data) {\n    return http.post('locales', data).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an UI Extension\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Extension ID\n   * @return {Promise<UiExtension.UiExtension>} Promise for an UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getUiExtension('<extension-id>'))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n\n\n  function getUiExtension(id) {\n    return http.get('extensions/' + id).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of UI Extension\n   * @memberof ContentfulEnvironmentAPI\n   * @return {Promise<UiExtension.UiExtensionCollection>} Promise for a collection of UI Extensions\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getUiExtensions()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getUiExtensions() {\n    return http.get('extensions').then(function (response) {\n      return wrapUiExtensionCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a UI Extension\n   * @memberof ContentfulEnvironmentAPI\n   * @see {UiExtension.UiExtension}\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createUiExtension({\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n\n\n  function createUiExtension(data) {\n    return http.post('extensions', data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a UI Extension with a custom ID\n   * @memberof ContentfulEnvironmentAPI\n   * @see {UiExtension.UiExtension}\n   * @param {string} id - Extension ID\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createUiExtensionWithId('<extension_id>', {\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n\n\n  function createUiExtensionWithId(id, data) {\n    return http.put('extensions/' + id, data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets all snapshots of an entry\n   * @memberof ContentfulEnvironmentAPI\n   * @func getEntrySnapshots\n   * @param {string} entryId - Entry ID\n   * @param {object=} query - query additional query paramaters\n   * @param {number=} query.skip - optional, number of items to skip\n   * @param {number=} query.limit - optional, limit total number of snapshots returned\n   * @param\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Entry Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEntrySnapshots('<entry_id>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n\n\n  function getEntrySnapshots(entryId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return http.get('entries/' + entryId + '/snapshots', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets all snapshots of a contentType\n   * @memberof ContentfulEnvironmentAPI\n   * @func getContentTypeSnapshots\n   * @param {string} contentTypeId - Content Type ID\n   * @param {object=} query - query additional query paramaters\n   * @param {number=} query.skip - optional, number of items to skip\n   * @param {number=} query.limit - optional, limit total number of snapshots returned\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Content Type Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getContentTypeSnapshots('<contentTypeId>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n\n\n  function getContentTypeSnapshots(contentTypeId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return http.get('content_types/' + contentTypeId + '/snapshots', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n  /*\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   *\n   */\n\n\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    delete: deleteEnvironment,\n    update: updateEnvironment,\n    getContentType: getContentType,\n    getContentTypes: getContentTypes,\n    createContentType: createContentType,\n    createContentTypeWithId: createContentTypeWithId,\n    getEditorInterfaceForContentType: getEditorInterfaceForContentType,\n    getEntry: getEntry,\n    getEntries: getEntries,\n    createEntry: createEntry,\n    createEntryWithId: createEntryWithId,\n    getAsset: getAsset,\n    getAssets: getAssets,\n    createAsset: createAsset,\n    createAssetWithId: createAssetWithId,\n    createAssetFromFiles: createAssetFromFiles,\n    getUpload: getUpload,\n    createUpload: createUpload,\n    getLocale: getLocale,\n    getLocales: getLocales,\n    createLocale: createLocale,\n    getUiExtension: getUiExtension,\n    getUiExtensions: getUiExtensions,\n    createUiExtension: createUiExtension,\n    createUiExtensionWithId: createUiExtensionWithId,\n    getEntrySnapshots: getEntrySnapshots,\n    getContentTypeSnapshots: getContentTypeSnapshots\n  };\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/create-environment-api.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","cloneDeep","createRequestConfig","errorHandler","entities","createEnvironmentApi","_ref","http","httpUpload","wrapEnvironment","environment","_entities$contentType","contentType","wrapContentType","wrapContentTypeCollection","_entities$entry","entry","wrapEntry","wrapEntryCollection","_entities$asset","asset","wrapAsset","wrapAssetCollection","_entities$locale","locale","wrapLocale","wrapLocaleCollection","wrapSnapshotCollection","snapshot","wrapEditorInterface","editorInterface","wrapUpload","upload","_entities$uiExtension","uiExtension","wrapUiExtension","wrapUiExtensionCollection","deleteEnvironment","delete","then","response","updateEnvironment","raw","toPlainObject","data","sys","put","headers","version","getContentType","id","get","getEditorInterfaceForContentType","contentTypeId","getContentTypes","query","undefined","createContentType","post","createContentTypeWithId","getEntry","normalizeSelect","getEntries","createEntry","createEntryWithId","getAsset","getAssets","createAsset","createAssetWithId","createAssetFromFiles","file","fields","Promise","all","keys","map","_file$locale","fileName","createUpload","uploadFrom","type","linkType","uploads","reduce","fieldsData","catch","reject","Error","uploadResponse","getUpload","getLocale","getLocales","createLocale","getUiExtension","getUiExtensions","createUiExtension","createUiExtensionWithId","getEntrySnapshots","entryId","getContentTypeSnapshots","select","test","update"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Contentful Environment API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n * @namespace ContentfulEnvironmentAPI\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n\n/**\n * @memberof ContentfulEnvironmentAPI\n * @typedef {object} ContentfulEnvironmentAPI\n * @prop {function} delete\n * @prop {function} update\n * @prop {function} getContentType\n * @prop {function} getContentTypes\n * @prop {function} createContentType\n * @prop {function} createContentTypeWithId\n * @prop {function} getEntry\n * @prop {function} getEntries\n * @prop {function} createEntry\n * @prop {function} createEntryWithId\n * @prop {function} getAsset\n * @prop {function} getAssets\n * @prop {function} createAsset\n * @prop {function} createAssetWithId\n * @prop {function} getLocale\n * @prop {function} getLocales\n * @prop {function} createLocale\n * @prop {function} getUiExtension\n * @prop {function} getUiExtensions\n * @prop {function} createUiExtension\n * @prop {function} createUiExtensionWithId\n * @prop {function} getEntrySnapshots\n * @prop {function} getContentTypeSnapshots\n */\n\n/**\n * Creates API object with methods to access the Environment API\n * @private\n * @param {object} params - API initialization params\n * @prop {object} http - HTTP client instance\n * @prop {object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulEnvironmentAPI}\n */\nexport default function createEnvironmentApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapEnvironment = entities.environment.wrapEnvironment;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  /**\n   * Environment instances.\n   * @namespace Environment\n   */\n\n  /**\n   * Deletes the environment\n   * @memberof Environment\n   * @func delete\n   * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.delete())\n   * .then(() => console.log('Environment deleted.'))\n   * .catch(console.error)\n  */\n\n  function deleteEnvironment() {\n    return http.delete('').then(function (response) {}, errorHandler);\n  }\n\n  /**\n   * Updates the environment\n   * @memberof Environment\n   * @func update\n   * @return {Promise<Environment.Environment>} Promise for the updated environment.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => {\n   *   environment.name = 'New name'\n   *   return environment.update()\n   * })\n   * .then((environment) => console.log(`Environment ${environment.sys.id} renamed.`)\n   * .catch(console.error)\n  */\n  function updateEnvironment() {\n    var raw = this.toPlainObject();\n    var data = cloneDeep(raw);\n    delete data.sys;\n    return http.put('', data, {\n      headers: {\n        'X-Contentful-Version': raw.sys.version\n      }\n    }).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Content Type ID\n   * @return {Promise<ContentType.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getContentType('<content_type_id>'))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n  function getContentType(id) {\n    return http.get('content_types/' + id).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an EditorInterface for a ContentType\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} contentTypeId - Content Type ID\n   * @return {Promise<EditorInterface.EditorInterface>} Promise for an EditorInterface\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEditorInterfaceForContentType('<content_type_id>'))\n   * .then((EditorInterface) => console.log(EditorInterface))\n   * .catch(console.error)\n   */\n  function getEditorInterfaceForContentType(contentTypeId) {\n    return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n      return wrapEditorInterface(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<ContentType.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getContentTypes())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getContentTypes() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    return http.get('content_types', createRequestConfig({ query: query })).then(function (response) {\n      return wrapContentTypeCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Content Type\n   * @memberof ContentfulEnvironmentAPI\n   * @see {ContentType}\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createContentType({\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n  function createContentType(data) {\n    return http.post('content_types', data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Content Type with a custom ID\n   * @memberof ContentfulEnvironmentAPI\n   * @see {ContentType.ContentType}\n   * @param {string} id - Content Type ID\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createContentTypeWithId('<content-type-id>', {\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n  function createContentTypeWithId(id, data) {\n    return http.put('content_types/' + id, data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an Entry\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Entry ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entry.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEntry('<entry-id>'))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n  function getEntry(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    normalizeSelect(query);\n    return http.get('entries/' + id, createRequestConfig({ query: query })).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Entries\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entry.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getEntries() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    normalizeSelect(query);\n    return http.get('entries', createRequestConfig({ query: query })).then(function (response) {\n      return wrapEntryCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Entry\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type ID of the newly created Entry\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createEntry('<content_type_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n  function createEntry(contentTypeId, data) {\n    return http.post('entries', data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Entry with a custom ID\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type of the newly created Entry\n   * @param {string} id - Entry ID\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create entry\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createEntryWithId('<content_type_id>', '<entry_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n  function createEntryWithId(contentTypeId, id, data) {\n    return http.put('entries/' + id, data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an Asset\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Asset ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Asset.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getAsset('<asset_id>'))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n  */\n  function getAsset(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    normalizeSelect(query);\n    return http.get('assets/' + id, createRequestConfig({ query: query })).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Assets\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Asset.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getAssets())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getAssets() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    normalizeSelect(query);\n    return http.get('assets', createRequestConfig({ query: query })).then(function (response) {\n      return wrapAssetCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createAsset({\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Playsam Streamliner'\n   *    },\n   *    file: {\n   *       'en-US': {\n   *         contentType: 'image/jpeg',\n   *        fileName: 'example.jpeg',\n   *        upload: 'https://example.com/example.jpg'\n   *      }\n   *    }\n   *   }\n   * }))\n   * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Asset.Asset}\n   * @param {string} id - Asset ID\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createAssetWithId('<asset_id>', {\n   *   title: {\n   *     'en-US': 'Playsam Streamliner'\n   *   },\n   *   file: {\n   *     'en-US': {\n   *       contentType: 'image/jpeg',\n   *       fileName: 'example.jpeg',\n   *       upload: 'https://example.com/example.jpg'\n   *     }\n   *   }\n   * }))\n   * .then((asset) => asset.process())\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n  function createAssetWithId(id, data) {\n    return http.put('assets/' + id, data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @param {object} data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createAssetFromFiles({\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          file: createReadStream('path/to/filename_english.jpg')\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/svg+xml',\n   *          fileName: 'filename_german.svg',\n   *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n   *       }\n   *     }\n   *   }\n   * }))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n  function createAssetFromFiles(data) {\n    var file = data.fields.file;\n\n    return Promise.all(Object.keys(file).map(function (locale) {\n      var _file$locale = file[locale],\n          contentType = _file$locale.contentType,\n          fileName = _file$locale.fileName;\n\n      return createUpload(file[locale]).then(function (upload) {\n        return _defineProperty({}, locale, {\n          contentType: contentType,\n          fileName: fileName,\n          uploadFrom: {\n            sys: {\n              type: 'Link',\n              linkType: 'Upload',\n              id: upload.sys.id\n            }\n          }\n        });\n      });\n    })).then(function (uploads) {\n      data.fields.file = uploads.reduce(function (fieldsData, upload) {\n        return _extends({}, fieldsData, upload);\n      }, {});\n      return createAsset(data);\n    }).catch(errorHandler);\n  }\n\n  /**\n   * Creates a Upload.\n   * @memberof ContentfulEnvironmentAPI\n   * @param {object} data - Object with file information.\n   * @param {object} data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Upload>} Upload object containing information about the uploaded file.\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createUpload({file: uploadStream})\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n  function createUpload(data) {\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    }).catch(errorHandler);\n  }\n\n  /**\n   * Gets an Upload\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Upload ID\n   * @return {Promise<Upload>} Promise for an Upload\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getUpload('<upload-id>')\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n  function getUpload(id) {\n    return httpUpload.get('uploads/' + id).then(function (response) {\n      return wrapUpload(http, response.data);\n    }).catch(errorHandler);\n  }\n\n  /**\n   * Gets a Locale\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Locale ID\n   * @return {Promise<Locale.Locale>} Promise for an Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getLocale('<locale_id>'))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n  */\n  function getLocale(id) {\n    return http.get('locales/' + id).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Locales\n   * @memberof ContentfulEnvironmentAPI\n   * @return {Promise<Locale.LocaleCollection>} Promise for a collection of Locales\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getLocales())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getLocales() {\n    return http.get('locales').then(function (response) {\n      return wrapLocaleCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Locale\n   * @memberof ContentfulEnvironmentAPI\n   * @see {Locale.Locale}\n   * @param {object} data - Object representation of the Locale to be created\n   * @return {Promise<Locale.Locale>} Promise for the newly created Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create locale\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createLocale({\n   *   name: 'German (Austria)',\n   *   code: 'de-AT',\n   *   fallbackCode: 'de-DE',\n   *   optional: true\n   * }))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n   */\n  function createLocale(data) {\n    return http.post('locales', data).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an UI Extension\n   * @memberof ContentfulEnvironmentAPI\n   * @param {string} id - Extension ID\n   * @return {Promise<UiExtension.UiExtension>} Promise for an UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getUiExtension('<extension-id>'))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n  function getUiExtension(id) {\n    return http.get('extensions/' + id).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of UI Extension\n   * @memberof ContentfulEnvironmentAPI\n   * @return {Promise<UiExtension.UiExtensionCollection>} Promise for a collection of UI Extensions\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getUiExtensions()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getUiExtensions() {\n    return http.get('extensions').then(function (response) {\n      return wrapUiExtensionCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a UI Extension\n   * @memberof ContentfulEnvironmentAPI\n   * @see {UiExtension.UiExtension}\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createUiExtension({\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n  function createUiExtension(data) {\n    return http.post('extensions', data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a UI Extension with a custom ID\n   * @memberof ContentfulEnvironmentAPI\n   * @see {UiExtension.UiExtension}\n   * @param {string} id - Extension ID\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.createUiExtensionWithId('<extension_id>', {\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n  function createUiExtensionWithId(id, data) {\n    return http.put('extensions/' + id, data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets all snapshots of an entry\n   * @memberof ContentfulEnvironmentAPI\n   * @func getEntrySnapshots\n   * @param {string} entryId - Entry ID\n   * @param {object=} query - query additional query paramaters\n   * @param {number=} query.skip - optional, number of items to skip\n   * @param {number=} query.limit - optional, limit total number of snapshots returned\n   * @param\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Entry Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getEntrySnapshots('<entry_id>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n  function getEntrySnapshots(entryId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return http.get('entries/' + entryId + '/snapshots', createRequestConfig({ query: query })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets all snapshots of a contentType\n   * @memberof ContentfulEnvironmentAPI\n   * @func getContentTypeSnapshots\n   * @param {string} contentTypeId - Content Type ID\n   * @param {object=} query - query additional query paramaters\n   * @param {number=} query.skip - optional, number of items to skip\n   * @param {number=} query.limit - optional, limit total number of snapshots returned\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Content Type Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environment-id>'))\n   * .then((environment) => environment.getContentTypeSnapshots('<contentTypeId>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n  function getContentTypeSnapshots(contentTypeId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return http.get('content_types/' + contentTypeId + '/snapshots', createRequestConfig({ query: query })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /*\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   *\n   */\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    delete: deleteEnvironment,\n    update: updateEnvironment,\n    getContentType: getContentType,\n    getContentTypes: getContentTypes,\n    createContentType: createContentType,\n    createContentTypeWithId: createContentTypeWithId,\n    getEditorInterfaceForContentType: getEditorInterfaceForContentType,\n    getEntry: getEntry,\n    getEntries: getEntries,\n    createEntry: createEntry,\n    createEntryWithId: createEntryWithId,\n    getAsset: getAsset,\n    getAssets: getAssets,\n    createAsset: createAsset,\n    createAssetWithId: createAssetWithId,\n    createAssetFromFiles: createAssetFromFiles,\n    getUpload: getUpload,\n    createUpload: createUpload,\n    getLocale: getLocale,\n    getLocales: getLocales,\n    createLocale: createLocale,\n    getUiExtension: getUiExtension,\n    getUiExtensions: getUiExtensions,\n    createUiExtension: createUiExtension,\n    createUiExtensionWithId: createUiExtensionWithId,\n    getEntrySnapshots: getEntrySnapshots,\n    getContentTypeSnapshots: getContentTypeSnapshots\n  };\n}"]},"metadata":{},"sourceType":"module"}