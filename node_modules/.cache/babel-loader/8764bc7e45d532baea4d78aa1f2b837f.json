{"ast":null,"code":"/**\n * Contentful Management API Client. Contains methods which allow access to\n * any operations that can be performed with a management token.\n * @namespace ContentfulClientAPI\n */\n\n/**\n * Types for meta information found across the different entities in Contentful\n * @namespace Meta\n */\n\n/**\n * System metadata. See <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/introduction/common-resource-attributes\">Common Resource Attributes</a> for more details.\n * @memberof Meta\n * @typedef Sys\n * @prop {string} type\n * @prop {string} id\n * @prop {Meta.Link} space\n * @prop {string} createdAt\n * @prop {string} updatedAt\n * @prop {number} revision\n */\n\n/**\n * Link to another entity. See <a href=\"https://www.contentful.com/developers/docs/concepts/links/\">Links</a> for more details.\n * @memberof Meta\n * @typedef Link\n * @prop {string} type - type of this entity. Always link.\n * @prop {string} id\n * @prop {string} linkType - type of this link. If defined, either Entry or Asset\n */\n\n/**\n * @memberof ContentfulClientAPI\n * @typedef {Object} ClientAPI\n * @prop {function} getSpace\n * @prop {function} getSpaces\n * @prop {function} createSpace\n * @prop {function} createPersonalAccessToken\n * @prop {function} getCurrentUser\n * @prop {function} getPersonalAccessTokens\n * @prop {function} getPersonalAccessToken\n * @prop {function} getOrganizations\n * @prop {function} rawRequest\n * @prop {function} getUsagePeriods\n * @prop {function} getUsages\n */\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Management API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Function} shouldLinksResolve - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nexport default function createClientApi(_ref) {\n  var http = _ref.http;\n  var _entities$space = entities.space,\n      wrapSpace = _entities$space.wrapSpace,\n      wrapSpaceCollection = _entities$space.wrapSpaceCollection;\n  var wrapUser = entities.user.wrapUser;\n  var _entities$personalAcc = entities.personalAccessToken,\n      wrapPersonalAccessToken = _entities$personalAcc.wrapPersonalAccessToken,\n      wrapPersonalAccessTokenCollection = _entities$personalAcc.wrapPersonalAccessTokenCollection;\n  var wrapOrganizationCollection = entities.organization.wrapOrganizationCollection;\n  var wrapUsagePeriodCollection = entities.usagePeriod.wrapUsagePeriodCollection;\n  var wrapUsageCollection = entities.usage.wrapUsageCollection;\n  /**\n   * Gets all spaces\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Space.SpaceCollection>} Promise for a collection of Spaces\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpaces()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n  function getSpaces() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return http.get('', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapSpaceCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a space\n   * @memberof ContentfulClientAPI\n   * @param {string} id - Space ID\n   * @return {Promise<Space.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => console.log(space))\n   * .catch(console.error)\n   */\n\n\n  function getSpace(id) {\n    return http.get(id).then(function (response) {\n      return wrapSpace(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a space\n   * @memberof ContentfulClientAPI\n   * @see {Space.Space}\n   * @param {object} data - Object representation of the Space to be created\n   * @param {string=} organizationId - Organization ID, if the associated token can manage more than one organization.\n   * @return {Promise<Space.Space>} Promise for the newly created Space\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.createSpace({\n   *   name: 'Name of new space'\n   * })\n   * .then((space) => console.log(space))\n   * .catch(console.error)\n   */\n\n\n  function createSpace(data, organizationId) {\n    return http.post('', data, {\n      headers: organizationId ? {\n        'X-Contentful-Organization': organizationId\n      } : {}\n    }).then(function (response) {\n      return wrapSpace(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Organizations\n   * @memberof ContentfulClientAPI\n   * @return {Promise<OrganizationCollection>} Promise for a collection of Organizations\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getOrganizations()\n   * .then(result => console.log(result.items))\n   * .catch(console.error)\n   */\n\n\n  function getOrganizations() {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/organizations/');\n    return http.get('', {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapOrganizationCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of usage periods for the organization.\n   * @memberof ContentfulClientAPI\n   * @param {string} organizationId - id of organization\n   * @return {Promise<UsagePeriod.UsagePeriodCollection>} Promise for a collection of usage periods\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getUsagePeriods('<organizationId>')\n   * .then(result => console.log(result.items))\n   * .catch(console.error)\n   */\n\n\n  function getUsagePeriods(organizationId) {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/organizations/' + organizationId + '/usage_periods');\n    var headers = {\n      'x-contentful-enable-alpha-feature': 'usage-insights'\n    };\n    return http.get('', {\n      baseURL: baseURL,\n      headers: headers\n    }).then(function (response) {\n      return wrapUsagePeriodCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of usages for the organization.\n   * @memberof ContentfulClientAPI\n   * @param {string} organizationId\n   * @param {string} type - either 'organization' or 'space', type of usages to be returned\n   * @param {Object<{filters:{metric: string, usagePeriod: string}, orderBy:{metricUsage: string}}>} query - Object with search params.\n   * 'filters[metric]' is a required field, possible values are one of 'cda', 'cma', 'cpa', 'all_apis'.\n   * 'filters[usagePeriod]' is also required, it's the ID of the usage period.\n   * 'orderBy[metricUsage]' is optional, value can be asc or desc. It orders resources in response's 'items' array by total usage\n   * @return {Promise<Usage.UsageCollection>} Promise for a collection of usage\n   * @example\n   *\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getUsages('<organizationId>', 'space', {\n   *    'filters[metric]': 'cda', // required\n   *    'filters[usagePeriod]': '1234', // required\n   *    'orderBy[metricUsage]': 'asc'\n   * })\n   * .then(result => console.log(result.items))\n   * .catch(console.error)\n   */\n\n\n  function getUsages(organizationId, type) {\n    var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!(query['filters[metric]'] && query['filters[usagePeriod]'])) {\n      return Promise.reject(new Error('Missing either filters[metric] or filters[usagePeriod] in usages query.'));\n    }\n\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/organizations/' + organizationId + '/usages/' + type);\n    var headers = {\n      'x-contentful-enable-alpha-feature': 'usage-insights'\n    };\n    return http.get('', {\n      baseURL: baseURL,\n      headers: headers,\n      params: createRequestConfig({\n        query: query\n      }).params\n    }).then(function (response) {\n      return wrapUsageCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets the authenticated user\n   * @memberof ContentfulClientAPI\n   * @return {Promise<User>} Promise for a User\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getCurrentUser()\n   * .then(user => console.log(user.firstName))\n   * .catch(console.error)\n   */\n\n\n  function getCurrentUser() {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/');\n    return http.get('', {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapUser(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a personal access token\n   * @memberof ContentfulClientAPI\n   * @param {Object} data - personal access token config\n   * @return {Promise<User>} Promise for a Token\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.createPersonalAccessToken(\n   *  {\n   *    \"name\": \"My Token\",\n   *    \"scope\": [\n   *      \"content_management_manage\"\n   *    ]\n   *  }\n   * )\n   * .then(personalAccessToken => console.log(personalAccessToken.token))\n   * .catch(console.error)\n   */\n\n\n  function createPersonalAccessToken(data) {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n    return http.post('', data, {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapPersonalAccessToken(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a personal access token\n   * @memberof ContentfulClientAPI\n   * @param {Object} data - personal access token config\n   * @return {Promise<User>} Promise for a Token\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getPersonalAccessToken(tokenId)\n   * .then(token => console.log(token.token))\n   * .catch(console.error)\n   */\n\n\n  function getPersonalAccessToken(tokenId) {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n    return http.get(tokenId, {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapPersonalAccessToken(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets all personal access tokens\n   * @memberof ContentfulClientAPI\n   * @return {Promise<User>} Promise for a Token\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getPersonalAccessTokens()\n   * .then(response => console.log(reponse.items))\n   * .catch(console.error)\n   */\n\n\n  function getPersonalAccessTokens() {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n    return http.get('', {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapPersonalAccessTokenCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Make a custom request to the Contentful management API's /spaces endpoint\n   * @memberof ContentfulClientAPI\n   * @param {Object} opts - axios request options (https://github.com/mzabriskie/axios)\n   * @return {Promise<Object>} Promise for the response data\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.rawRequest({\n   *   method: 'GET',\n   *   url: '/custom/path'\n   * })\n   * .then((responseData) => console.log(responseData))\n   * .catch(console.error)\n   */\n\n\n  function rawRequest(opts) {\n    return http(opts).then(function (response) {\n      return response.data;\n    }, errorHandler);\n  }\n\n  return {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    createSpace: createSpace,\n    getOrganizations: getOrganizations,\n    getCurrentUser: getCurrentUser,\n    createPersonalAccessToken: createPersonalAccessToken,\n    getPersonalAccessToken: getPersonalAccessToken,\n    getPersonalAccessTokens: getPersonalAccessTokens,\n    rawRequest: rawRequest,\n    getUsagePeriods: getUsagePeriods,\n    getUsages: getUsages\n  };\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/create-contentful-api.js"],"names":["createRequestConfig","errorHandler","entities","createClientApi","_ref","http","_entities$space","space","wrapSpace","wrapSpaceCollection","wrapUser","user","_entities$personalAcc","personalAccessToken","wrapPersonalAccessToken","wrapPersonalAccessTokenCollection","wrapOrganizationCollection","organization","wrapUsagePeriodCollection","usagePeriod","wrapUsageCollection","usage","getSpaces","query","arguments","length","undefined","get","then","response","data","getSpace","id","createSpace","organizationId","post","headers","getOrganizations","baseURL","defaults","replace","getUsagePeriods","getUsages","type","Promise","reject","Error","params","getCurrentUser","createPersonalAccessToken","getPersonalAccessToken","tokenId","getPersonalAccessTokens","rawRequest","opts"],"mappings":"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","sourcesContent":["/**\n * Contentful Management API Client. Contains methods which allow access to\n * any operations that can be performed with a management token.\n * @namespace ContentfulClientAPI\n */\n\n/**\n * Types for meta information found across the different entities in Contentful\n * @namespace Meta\n */\n\n/**\n * System metadata. See <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/introduction/common-resource-attributes\">Common Resource Attributes</a> for more details.\n * @memberof Meta\n * @typedef Sys\n * @prop {string} type\n * @prop {string} id\n * @prop {Meta.Link} space\n * @prop {string} createdAt\n * @prop {string} updatedAt\n * @prop {number} revision\n */\n\n/**\n * Link to another entity. See <a href=\"https://www.contentful.com/developers/docs/concepts/links/\">Links</a> for more details.\n * @memberof Meta\n * @typedef Link\n * @prop {string} type - type of this entity. Always link.\n * @prop {string} id\n * @prop {string} linkType - type of this link. If defined, either Entry or Asset\n */\n\n/**\n * @memberof ContentfulClientAPI\n * @typedef {Object} ClientAPI\n * @prop {function} getSpace\n * @prop {function} getSpaces\n * @prop {function} createSpace\n * @prop {function} createPersonalAccessToken\n * @prop {function} getCurrentUser\n * @prop {function} getPersonalAccessTokens\n * @prop {function} getPersonalAccessToken\n * @prop {function} getOrganizations\n * @prop {function} rawRequest\n * @prop {function} getUsagePeriods\n * @prop {function} getUsages\n */\n\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Management API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Function} shouldLinksResolve - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\nexport default function createClientApi(_ref) {\n  var http = _ref.http;\n  var _entities$space = entities.space,\n      wrapSpace = _entities$space.wrapSpace,\n      wrapSpaceCollection = _entities$space.wrapSpaceCollection;\n  var wrapUser = entities.user.wrapUser;\n  var _entities$personalAcc = entities.personalAccessToken,\n      wrapPersonalAccessToken = _entities$personalAcc.wrapPersonalAccessToken,\n      wrapPersonalAccessTokenCollection = _entities$personalAcc.wrapPersonalAccessTokenCollection;\n  var wrapOrganizationCollection = entities.organization.wrapOrganizationCollection;\n  var wrapUsagePeriodCollection = entities.usagePeriod.wrapUsagePeriodCollection;\n  var wrapUsageCollection = entities.usage.wrapUsageCollection;\n\n  /**\n   * Gets all spaces\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Space.SpaceCollection>} Promise for a collection of Spaces\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpaces()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n  function getSpaces() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    return http.get('', createRequestConfig({ query: query })).then(function (response) {\n      return wrapSpaceCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a space\n   * @memberof ContentfulClientAPI\n   * @param {string} id - Space ID\n   * @return {Promise<Space.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => console.log(space))\n   * .catch(console.error)\n   */\n  function getSpace(id) {\n    return http.get(id).then(function (response) {\n      return wrapSpace(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a space\n   * @memberof ContentfulClientAPI\n   * @see {Space.Space}\n   * @param {object} data - Object representation of the Space to be created\n   * @param {string=} organizationId - Organization ID, if the associated token can manage more than one organization.\n   * @return {Promise<Space.Space>} Promise for the newly created Space\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.createSpace({\n   *   name: 'Name of new space'\n   * })\n   * .then((space) => console.log(space))\n   * .catch(console.error)\n   */\n  function createSpace(data, organizationId) {\n    return http.post('', data, {\n      headers: organizationId ? { 'X-Contentful-Organization': organizationId } : {}\n    }).then(function (response) {\n      return wrapSpace(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Organizations\n   * @memberof ContentfulClientAPI\n   * @return {Promise<OrganizationCollection>} Promise for a collection of Organizations\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getOrganizations()\n   * .then(result => console.log(result.items))\n   * .catch(console.error)\n   */\n  function getOrganizations() {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/organizations/');\n    return http.get('', {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapOrganizationCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of usage periods for the organization.\n   * @memberof ContentfulClientAPI\n   * @param {string} organizationId - id of organization\n   * @return {Promise<UsagePeriod.UsagePeriodCollection>} Promise for a collection of usage periods\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getUsagePeriods('<organizationId>')\n   * .then(result => console.log(result.items))\n   * .catch(console.error)\n   */\n  function getUsagePeriods(organizationId) {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/organizations/' + organizationId + '/usage_periods');\n    var headers = {\n      'x-contentful-enable-alpha-feature': 'usage-insights'\n    };\n    return http.get('', {\n      baseURL: baseURL,\n      headers: headers\n    }).then(function (response) {\n      return wrapUsagePeriodCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of usages for the organization.\n   * @memberof ContentfulClientAPI\n   * @param {string} organizationId\n   * @param {string} type - either 'organization' or 'space', type of usages to be returned\n   * @param {Object<{filters:{metric: string, usagePeriod: string}, orderBy:{metricUsage: string}}>} query - Object with search params.\n   * 'filters[metric]' is a required field, possible values are one of 'cda', 'cma', 'cpa', 'all_apis'.\n   * 'filters[usagePeriod]' is also required, it's the ID of the usage period.\n   * 'orderBy[metricUsage]' is optional, value can be asc or desc. It orders resources in response's 'items' array by total usage\n   * @return {Promise<Usage.UsageCollection>} Promise for a collection of usage\n   * @example\n   *\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getUsages('<organizationId>', 'space', {\n   *    'filters[metric]': 'cda', // required\n   *    'filters[usagePeriod]': '1234', // required\n   *    'orderBy[metricUsage]': 'asc'\n   * })\n   * .then(result => console.log(result.items))\n   * .catch(console.error)\n   */\n  function getUsages(organizationId, type) {\n    var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!(query['filters[metric]'] && query['filters[usagePeriod]'])) {\n      return Promise.reject(new Error('Missing either filters[metric] or filters[usagePeriod] in usages query.'));\n    }\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/organizations/' + organizationId + '/usages/' + type);\n    var headers = {\n      'x-contentful-enable-alpha-feature': 'usage-insights'\n    };\n    return http.get('', { baseURL: baseURL, headers: headers, params: createRequestConfig({ query: query }).params }).then(function (response) {\n      return wrapUsageCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets the authenticated user\n   * @memberof ContentfulClientAPI\n   * @return {Promise<User>} Promise for a User\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getCurrentUser()\n   * .then(user => console.log(user.firstName))\n   * .catch(console.error)\n   */\n  function getCurrentUser() {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/');\n    return http.get('', {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapUser(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a personal access token\n   * @memberof ContentfulClientAPI\n   * @param {Object} data - personal access token config\n   * @return {Promise<User>} Promise for a Token\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.createPersonalAccessToken(\n   *  {\n   *    \"name\": \"My Token\",\n   *    \"scope\": [\n   *      \"content_management_manage\"\n   *    ]\n   *  }\n   * )\n   * .then(personalAccessToken => console.log(personalAccessToken.token))\n   * .catch(console.error)\n   */\n  function createPersonalAccessToken(data) {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n    return http.post('', data, {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapPersonalAccessToken(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a personal access token\n   * @memberof ContentfulClientAPI\n   * @param {Object} data - personal access token config\n   * @return {Promise<User>} Promise for a Token\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getPersonalAccessToken(tokenId)\n   * .then(token => console.log(token.token))\n   * .catch(console.error)\n   */\n  function getPersonalAccessToken(tokenId) {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n    return http.get(tokenId, {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapPersonalAccessToken(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets all personal access tokens\n   * @memberof ContentfulClientAPI\n   * @return {Promise<User>} Promise for a Token\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getPersonalAccessTokens()\n   * .then(response => console.log(reponse.items))\n   * .catch(console.error)\n   */\n  function getPersonalAccessTokens() {\n    var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n    return http.get('', {\n      baseURL: baseURL\n    }).then(function (response) {\n      return wrapPersonalAccessTokenCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Make a custom request to the Contentful management API's /spaces endpoint\n   * @memberof ContentfulClientAPI\n   * @param {Object} opts - axios request options (https://github.com/mzabriskie/axios)\n   * @return {Promise<Object>} Promise for the response data\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.rawRequest({\n   *   method: 'GET',\n   *   url: '/custom/path'\n   * })\n   * .then((responseData) => console.log(responseData))\n   * .catch(console.error)\n   */\n  function rawRequest(opts) {\n    return http(opts).then(function (response) {\n      return response.data;\n    }, errorHandler);\n  }\n\n  return {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    createSpace: createSpace,\n    getOrganizations: getOrganizations,\n    getCurrentUser: getCurrentUser,\n    createPersonalAccessToken: createPersonalAccessToken,\n    getPersonalAccessToken: getPersonalAccessToken,\n    getPersonalAccessTokens: getPersonalAccessTokens,\n    rawRequest: rawRequest,\n    getUsagePeriods: getUsagePeriods,\n    getUsages: getUsages\n  };\n}"]},"metadata":{},"sourceType":"module"}