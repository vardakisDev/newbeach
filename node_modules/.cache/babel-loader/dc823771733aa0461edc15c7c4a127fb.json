{"ast":null,"code":"/**\n * Role instances\n * @namespace Role\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n/**\n * See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/roles/create-a-role\n * @memberof Role\n * @typedef Role\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {object} permissions - Permissions for application sections\n * @prop {object} policies\n * @prop {function(): Object} toPlainObject() - Returns this Role as a plain JS object\n */\n\nfunction createRoleApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Role\n     * @func update\n     * @return {Promise<Role>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRole('<roles_id>'))\n     * .then((roles) => {\n     *   roles.name = 'New role name'\n     *   return roles.update()\n     * })\n     * .then((roles) => console.log(`roles ${roles.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'roles',\n      wrapperMethod: wrapRole\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Role\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRole('<role_id>'))\n     * .then((role) => role.delete())\n     * .then((role) => console.log(`role deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'roles'\n    })\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw role data\n * @return {Role} Wrapped role data\n */\n\n\nexport function wrapRole(http, data) {\n  var role = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(role, createRoleApi(http));\n  return freezeSys(role);\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw role collection data\n * @return {RoleCollection} Wrapped role collection data\n */\n\nexport function wrapRoleCollection(http, data) {\n  var roles = toPlainObject(cloneDeep(data));\n  roles.items = roles.items.map(function (entity) {\n    return wrapRole(http, entity);\n  });\n  return freezeSys(roles);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/role.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createUpdateEntity","createDeleteEntity","createRoleApi","http","update","entityPath","wrapperMethod","wrapRole","delete","data","role","wrapRoleCollection","roles","items","map","entity"],"mappings":"AAAA;;;;AAIA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AAEA;;;;;;;;;;;AAWA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO;AAEL;;;;;;;;;;;;;;;;;;;;;AAqBAC,IAAAA,MAAM,EAAEJ,kBAAkB,CAAC;AACzBG,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE,OAFa;AAGzBC,MAAAA,aAAa,EAAEC;AAHU,KAAD,CAvBrB;;AA6BL;;;;;;;;;;;;;;;;;;AAkBAC,IAAAA,MAAM,EAAEP,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE;AAFa,KAAD;AA/CrB,GAAP;AAoDD;AAED;;;;;;;;AAMA,OAAO,SAASE,QAAT,CAAkBJ,IAAlB,EAAwBM,IAAxB,EAA8B;AACnC,MAAIC,IAAI,GAAGZ,aAAa,CAACF,SAAS,CAACa,IAAD,CAAV,CAAxB;AACAV,EAAAA,kBAAkB,CAACW,IAAD,EAAOR,aAAa,CAACC,IAAD,CAApB,CAAlB;AACA,SAAON,SAAS,CAACa,IAAD,CAAhB;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,kBAAT,CAA4BR,IAA5B,EAAkCM,IAAlC,EAAwC;AAC7C,MAAIG,KAAK,GAAGd,aAAa,CAACF,SAAS,CAACa,IAAD,CAAV,CAAzB;AACAG,EAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAUC,MAAV,EAAkB;AAC9C,WAAOR,QAAQ,CAACJ,IAAD,EAAOY,MAAP,CAAf;AACD,GAFa,CAAd;AAGA,SAAOlB,SAAS,CAACe,KAAD,CAAhB;AACD","sourcesContent":["/**\n * Role instances\n * @namespace Role\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n\n/**\n * See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/roles/create-a-role\n * @memberof Role\n * @typedef Role\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {object} permissions - Permissions for application sections\n * @prop {object} policies\n * @prop {function(): Object} toPlainObject() - Returns this Role as a plain JS object\n */\n\nfunction createRoleApi(http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Role\n     * @func update\n     * @return {Promise<Role>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRole('<roles_id>'))\n     * .then((roles) => {\n     *   roles.name = 'New role name'\n     *   return roles.update()\n     * })\n     * .then((roles) => console.log(`roles ${roles.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'roles',\n      wrapperMethod: wrapRole\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Role\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRole('<role_id>'))\n     * .then((role) => role.delete())\n     * .then((role) => console.log(`role deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'roles'\n    })\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw role data\n * @return {Role} Wrapped role data\n */\nexport function wrapRole(http, data) {\n  var role = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(role, createRoleApi(http));\n  return freezeSys(role);\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw role collection data\n * @return {RoleCollection} Wrapped role collection data\n */\nexport function wrapRoleCollection(http, data) {\n  var roles = toPlainObject(cloneDeep(data));\n  roles.items = roles.items.map(function (entity) {\n    return wrapRole(http, entity);\n  });\n  return freezeSys(roles);\n}"]},"metadata":{},"sourceType":"module"}