{"ast":null,"code":"/**\n * Locale instances\n * @namespace Locale\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n/**\n * @memberof Locale\n * @typedef Locale\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} code - Locale code (example: en-us)\n * @prop {string} fallbackCode - the locale code to fallback to when there is not content for the current locale\n * @prop {boolean} contentDeliveryApi - If the content under this locale should be available on the CDA (for public reading)\n * @prop {boolean} contentManagementApi - If the content under this locale should be available on the CMA (for editing)\n * @prop {boolean} default - If this is the default locale\n * @prop {boolean} optional - If the locale needs to be filled in on entries or not\n * @prop {function(): Object} toPlainObject() - Returns this Locale as a plain JS object\n */\n\nfunction createLocaleApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Locale\n     * @func update\n     * @return {Promise<Locale>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocale('<locale_id>'))\n     * .then((locale) => {\n     *   locale.name = 'New locale name'\n     *   return locale.update()\n     * })\n     * .then((locale) => console.log(`locale ${locale.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: function update() {\n      var locale = this;\n      delete locale.default; // we should not send this back\n\n      return createUpdateEntity({\n        http: http,\n        entityPath: 'locales',\n        wrapperMethod: wrapLocale\n      }).call(locale);\n    },\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Locale\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocale('<locale_id>'))\n     * .then((locale) => locale.delete())\n     * .then(() => console.log(`locale deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'locales'\n    })\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw locale data\n * @return {Locale} Wrapped locale data\n */\n\n\nexport function wrapLocale(http, data) {\n  delete data.internal_code;\n  var locale = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(locale, createLocaleApi(http));\n  return freezeSys(locale);\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw locale collection data\n * @return {LocaleCollection} Wrapped locale collection data\n */\n\nexport function wrapLocaleCollection(http, data) {\n  var locales = toPlainObject(cloneDeep(data));\n  locales.items = locales.items.map(function (entity) {\n    return wrapLocale(http, entity);\n  });\n  return freezeSys(locales);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/locale.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createUpdateEntity","createDeleteEntity","createLocaleApi","http","update","locale","default","entityPath","wrapperMethod","wrapLocale","call","delete","data","internal_code","wrapLocaleCollection","locales","items","map","entity"],"mappings":"AAAA;;;;AAIA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AAEA;;;;;;;;;;;;;;AAcA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAO;AACL;;;;;;;;;;;;;;;;;;;;;AAqBAC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,UAAIC,MAAM,GAAG,IAAb;AACA,aAAOA,MAAM,CAACC,OAAd,CAFwB,CAED;;AACvB,aAAON,kBAAkB,CAAC;AACxBG,QAAAA,IAAI,EAAEA,IADkB;AAExBI,QAAAA,UAAU,EAAE,SAFY;AAGxBC,QAAAA,aAAa,EAAEC;AAHS,OAAD,CAAlB,CAIJC,IAJI,CAICL,MAJD,CAAP;AAKD,KA9BI;;AAgCL;;;;;;;;;;;;;;;;;;AAkBAM,IAAAA,MAAM,EAAEV,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBI,MAAAA,UAAU,EAAE;AAFa,KAAD;AAlDrB,GAAP;AAuDD;AAED;;;;;;;;AAMA,OAAO,SAASE,UAAT,CAAoBN,IAApB,EAA0BS,IAA1B,EAAgC;AACrC,SAAOA,IAAI,CAACC,aAAZ;AACA,MAAIR,MAAM,GAAGP,aAAa,CAACF,SAAS,CAACgB,IAAD,CAAV,CAA1B;AACAb,EAAAA,kBAAkB,CAACM,MAAD,EAASH,eAAe,CAACC,IAAD,CAAxB,CAAlB;AACA,SAAON,SAAS,CAACQ,MAAD,CAAhB;AACD;AAED;;;;;;;AAMA,OAAO,SAASS,oBAAT,CAA8BX,IAA9B,EAAoCS,IAApC,EAA0C;AAC/C,MAAIG,OAAO,GAAGjB,aAAa,CAACF,SAAS,CAACgB,IAAD,CAAV,CAA3B;AACAG,EAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACC,KAAR,CAAcC,GAAd,CAAkB,UAAUC,MAAV,EAAkB;AAClD,WAAOT,UAAU,CAACN,IAAD,EAAOe,MAAP,CAAjB;AACD,GAFe,CAAhB;AAGA,SAAOrB,SAAS,CAACkB,OAAD,CAAhB;AACD","sourcesContent":["/**\n * Locale instances\n * @namespace Locale\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n\n/**\n * @memberof Locale\n * @typedef Locale\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} code - Locale code (example: en-us)\n * @prop {string} fallbackCode - the locale code to fallback to when there is not content for the current locale\n * @prop {boolean} contentDeliveryApi - If the content under this locale should be available on the CDA (for public reading)\n * @prop {boolean} contentManagementApi - If the content under this locale should be available on the CMA (for editing)\n * @prop {boolean} default - If this is the default locale\n * @prop {boolean} optional - If the locale needs to be filled in on entries or not\n * @prop {function(): Object} toPlainObject() - Returns this Locale as a plain JS object\n */\n\nfunction createLocaleApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Locale\n     * @func update\n     * @return {Promise<Locale>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocale('<locale_id>'))\n     * .then((locale) => {\n     *   locale.name = 'New locale name'\n     *   return locale.update()\n     * })\n     * .then((locale) => console.log(`locale ${locale.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: function update() {\n      var locale = this;\n      delete locale.default; // we should not send this back\n      return createUpdateEntity({\n        http: http,\n        entityPath: 'locales',\n        wrapperMethod: wrapLocale\n      }).call(locale);\n    },\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Locale\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocale('<locale_id>'))\n     * .then((locale) => locale.delete())\n     * .then(() => console.log(`locale deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'locales'\n    })\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw locale data\n * @return {Locale} Wrapped locale data\n */\nexport function wrapLocale(http, data) {\n  delete data.internal_code;\n  var locale = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(locale, createLocaleApi(http));\n  return freezeSys(locale);\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw locale collection data\n * @return {LocaleCollection} Wrapped locale collection data\n */\nexport function wrapLocaleCollection(http, data) {\n  var locales = toPlainObject(cloneDeep(data));\n  locales.items = locales.items.map(function (entity) {\n    return wrapLocale(http, entity);\n  });\n  return freezeSys(locales);\n}"]},"metadata":{},"sourceType":"module"}