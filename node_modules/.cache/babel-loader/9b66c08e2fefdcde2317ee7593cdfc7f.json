{"ast":null,"code":"/**\n * Personal access token\n * @namespace PersonalAccessToken\n * */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\n\nfunction createPersonalAccessToken(http) {\n  return {\n    /**\n     * Revokes a personal access token\n     * @memberof PersonalAccessToken\n     * @func revoke\n     * @return {Promise<PersonalAccessToken>} Object the revoked personal access token\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *  accessToken: <content_management_api_key>\n     * })\n     *\n     * client.getPersonalAccessToken('<token-id>')\n     *  .then((personalAccessToken) => {\n     *    return personalAccessToken.revoke()\n     *  })\n     *  .catch(console.error)\n     */\n    revoke: function revoke() {\n      var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n      return http.put(this.sys.id + '/revoked', null, {\n        baseURL: baseURL\n      }).then(function (response) {\n        return response.data;\n      }, errorHandler);\n    }\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw  personal access token data\n * @return {PersonalAccessToken} Wrapped personal access token\n */\n\n\nexport function wrapPersonalAccessToken(http, data) {\n  var personalAccessToken = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(personalAccessToken, createPersonalAccessToken(http));\n  return freezeSys(personalAccessToken);\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw personal access collection data\n * @return {PersonalAccessTokenCollection} Wrapped personal access token collection data\n */\n\nexport function wrapPersonalAccessTokenCollection(http, data) {\n  var personalAccessTokens = toPlainObject(cloneDeep(data));\n  personalAccessTokens.items = personalAccessTokens.items.map(function (entity) {\n    return wrapPersonalAccessToken(http, entity);\n  });\n  return freezeSys(personalAccessTokens);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/personal-access-token.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","errorHandler","createPersonalAccessToken","http","revoke","baseURL","defaults","replace","put","sys","id","then","response","data","wrapPersonalAccessToken","personalAccessToken","wrapPersonalAccessTokenCollection","personalAccessTokens","items","map","entity"],"mappings":"AAAA;;;;AAKA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;AAEA,SAASC,yBAAT,CAAmCC,IAAnC,EAAyC;AACvC,SAAO;AACL;;;;;;;;;;;;;;;;;;AAkBAC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,UAAIC,OAAO,GAAGF,IAAI,CAACG,QAAL,CAAcD,OAAd,CAAsBE,OAAtB,CAA8B,UAA9B,EAA0C,yBAA1C,CAAd;AACA,aAAOJ,IAAI,CAACK,GAAL,CAAS,KAAKC,GAAL,CAASC,EAAT,GAAc,UAAvB,EAAmC,IAAnC,EAAyC;AAC9CL,QAAAA,OAAO,EAAEA;AADqC,OAAzC,EAEJM,IAFI,CAEC,UAAUC,QAAV,EAAoB;AAC1B,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAJM,EAIJZ,YAJI,CAAP;AAKD;AA1BI,GAAP;AA4BD;AAED;;;;;;;;AAMA,OAAO,SAASa,uBAAT,CAAiCX,IAAjC,EAAuCU,IAAvC,EAA6C;AAClD,MAAIE,mBAAmB,GAAGhB,aAAa,CAACF,SAAS,CAACgB,IAAD,CAAV,CAAvC;AACAb,EAAAA,kBAAkB,CAACe,mBAAD,EAAsBb,yBAAyB,CAACC,IAAD,CAA/C,CAAlB;AACA,SAAOL,SAAS,CAACiB,mBAAD,CAAhB;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,iCAAT,CAA2Cb,IAA3C,EAAiDU,IAAjD,EAAuD;AAC5D,MAAII,oBAAoB,GAAGlB,aAAa,CAACF,SAAS,CAACgB,IAAD,CAAV,CAAxC;AACAI,EAAAA,oBAAoB,CAACC,KAArB,GAA6BD,oBAAoB,CAACC,KAArB,CAA2BC,GAA3B,CAA+B,UAAUC,MAAV,EAAkB;AAC5E,WAAON,uBAAuB,CAACX,IAAD,EAAOiB,MAAP,CAA9B;AACD,GAF4B,CAA7B;AAGA,SAAOtB,SAAS,CAACmB,oBAAD,CAAhB;AACD","sourcesContent":["/**\n * Personal access token\n * @namespace PersonalAccessToken\n * */\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\n\nfunction createPersonalAccessToken(http) {\n  return {\n    /**\n     * Revokes a personal access token\n     * @memberof PersonalAccessToken\n     * @func revoke\n     * @return {Promise<PersonalAccessToken>} Object the revoked personal access token\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *  accessToken: <content_management_api_key>\n     * })\n     *\n     * client.getPersonalAccessToken('<token-id>')\n     *  .then((personalAccessToken) => {\n     *    return personalAccessToken.revoke()\n     *  })\n     *  .catch(console.error)\n     */\n    revoke: function revoke() {\n      var baseURL = http.defaults.baseURL.replace('/spaces/', '/users/me/access_tokens');\n      return http.put(this.sys.id + '/revoked', null, {\n        baseURL: baseURL\n      }).then(function (response) {\n        return response.data;\n      }, errorHandler);\n    }\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw  personal access token data\n * @return {PersonalAccessToken} Wrapped personal access token\n */\nexport function wrapPersonalAccessToken(http, data) {\n  var personalAccessToken = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(personalAccessToken, createPersonalAccessToken(http));\n  return freezeSys(personalAccessToken);\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw personal access collection data\n * @return {PersonalAccessTokenCollection} Wrapped personal access token collection data\n */\nexport function wrapPersonalAccessTokenCollection(http, data) {\n  var personalAccessTokens = toPlainObject(cloneDeep(data));\n  personalAccessTokens.items = personalAccessTokens.items.map(function (entity) {\n    return wrapPersonalAccessToken(http, entity);\n  });\n  return freezeSys(personalAccessTokens);\n}"]},"metadata":{},"sourceType":"module"}