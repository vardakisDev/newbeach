{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u03C3\\u03C4\\u03B5\\u03BB\\u03B7\\u03C2\\\\Desktop\\\\Hotel React\\\\resort\\\\src\\\\context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\";\nimport Client from \"./Contentful\";\nconst RoomContext = React.createContext();\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      //\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"beachResort\"\n        });\n        console.log(response.items);\n        let rooms = this.formatData(response.items);\n        let featuredRooms = rooms.filter(room => room.featured === true); //\n\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n          rooms,\n          featuredRooms,\n          sortedRooms: rooms,\n          loading: false,\n          //\n          price: maxPrice,\n          maxPrice,\n          maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      console.log(name, value);\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms]; // transform values\n      // get capacity\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \" \", this.props.children, \" \");\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomConsumer, RoomContext };\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \" \", value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), \" \");\n  };\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/src/context.js"],"names":["React","Component","items","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getData","response","getEntries","content_type","console","log","formatData","filter","room","featured","Math","max","map","item","size","setState","error","getRoom","slug","tempRooms","find","handleChange","event","target","value","checked","name","filterRooms","parseInt","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport items from \"./data\";\r\nimport Client from \"./Contentful\";\r\n\r\nconst RoomContext = React.createContext();\r\n\r\nexport default class RoomProvider extends Component {\r\n  state = {\r\n    rooms: [],\r\n    sortedRooms: [],\r\n    featuredRooms: [],\r\n    loading: true,\r\n    //\r\n    type: \"all\",\r\n    capacity: 1,\r\n    price: 0,\r\n    minPrice: 0,\r\n    maxPrice: 0,\r\n    minSize: 0,\r\n    maxSize: 0,\r\n    breakfast: false,\r\n    pets: false\r\n  };\r\n\r\n  getData = async () => {\r\n    try {\r\n      let response = await Client.getEntries({\r\n        content_type: \"beachResort\"\r\n      });\r\n      console.log(response.items);\r\n      let rooms = this.formatData(response.items);\r\n\r\n      let featuredRooms = rooms.filter(room => room.featured === true);\r\n      //\r\n      let maxPrice = Math.max(...rooms.map(item => item.price));\r\n      let maxSize = Math.max(...rooms.map(item => item.size));\r\n      this.setState({\r\n        rooms,\r\n        featuredRooms,\r\n        sortedRooms: rooms,\r\n        loading: false,\r\n        //\r\n        price: maxPrice,\r\n        maxPrice,\r\n        maxSize\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  formatData(items) {\r\n    let tempItems = items.map(item => {\r\n      let id = item.sys.id;\r\n      let images = item.fields.images.map(image => image.fields.file.url);\r\n\r\n      let room = {\r\n        ...item.fields,\r\n        images,\r\n        id\r\n      };\r\n      return room;\r\n    });\r\n    return tempItems;\r\n  }\r\n  getRoom = slug => {\r\n    let tempRooms = [...this.state.rooms];\r\n    const room = tempRooms.find(room => room.slug === slug);\r\n    return room;\r\n  };\r\n  handleChange = event => {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n    console.log(name, value);\r\n\r\n    this.setState(\r\n      {\r\n        [name]: value\r\n      },\r\n      this.filterRooms\r\n    );\r\n  };\r\n  filterRooms = () => {\r\n    let {\r\n      rooms,\r\n      type,\r\n      capacity,\r\n      price,\r\n      minSize,\r\n      maxSize,\r\n      breakfast,\r\n      pets\r\n    } = this.state;\r\n\r\n    let tempRooms = [...rooms];\r\n    // transform values\r\n    // get capacity\r\n    capacity = parseInt(capacity);\r\n    price = parseInt(price);\r\n    // filter by type\r\n    if (type !== \"all\") {\r\n      tempRooms = tempRooms.filter(room => room.type === type);\r\n    }\r\n    // filter by capacity\r\n    if (capacity !== 1) {\r\n      tempRooms = tempRooms.filter(room => room.capacity >= capacity);\r\n    }\r\n    // filter by price\r\n    tempRooms = tempRooms.filter(room => room.price <= price);\r\n    //filter by size\r\n    tempRooms = tempRooms.filter(\r\n      room => room.size >= minSize && room.size <= maxSize\r\n    );\r\n    //filter by breakfast\r\n    if (breakfast) {\r\n      tempRooms = tempRooms.filter(room => room.breakfast === true);\r\n    }\r\n    //filter by pets\r\n    if (pets) {\r\n      tempRooms = tempRooms.filter(room => room.pets === true);\r\n    }\r\n    this.setState({\r\n      sortedRooms: tempRooms\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <RoomContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          getRoom: this.getRoom,\r\n          handleChange: this.handleChange\r\n        }}\r\n      >\r\n        {\" \"}\r\n        {this.props.children}{\" \"}\r\n      </RoomContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\nexport { RoomProvider, RoomConsumer, RoomContext };\r\n\r\nexport function withRoomConsumer(Component) {\r\n  return function ConsumerWrapper(props) {\r\n    return (\r\n      <RoomConsumer>\r\n        {\" \"}\r\n        {value => <Component {...props} context={value} />}{\" \"}\r\n      </RoomConsumer>\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}