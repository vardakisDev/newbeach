{"ast":null,"code":"/**\n * Api Key instances\n * @namespace ApiKey\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n/**\n * @memberof ApiKey\n * @typedef ApiKey\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} description\n * @prop {function(): Object} toPlainObject() - Returns this Api Key as a plain JS object\n */\n\nfunction createApiKeyApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof ApiKey\n     * @func update\n     * @return {Promise<ApiKey>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey(<api-key-id>))\n     * .then((apiKey) => {\n     *  apiKey.name = 'New name'\n     *  return apiKey.update()\n     * })\n     * .then(apiKey => console.log(apiKey.name))\n     * .catch(console.error)\n     */\n    update: function update() {\n      if ('accessToken' in this) {\n        delete this.accessToken;\n      }\n\n      if ('preview_api_key' in this) {\n        delete this.preview_api_key;\n      }\n\n      if ('policies' in this) {\n        delete this.policies;\n      }\n\n      var update = createUpdateEntity({\n        http: http,\n        entityPath: 'api_keys',\n        wrapperMethod: wrapApiKey\n      });\n      return update.call(this);\n    },\n\n    /**\n     * Deletes this object on the server.\n     * @memberof ApiKey\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey(<api-key-id>))\n     * .then((apiKey) => apiKey.delete())\n     * .then(() => console.log('apikey deleted'))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'api_keys'\n    })\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw api key data\n * @return {ApiKey} Wrapped api key data\n */\n\n\nexport function wrapApiKey(http, data) {\n  var apiKey = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(apiKey, createApiKeyApi(http));\n  return freezeSys(apiKey);\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw api key collection data\n * @return {ApiKeyCollection} Wrapped api key collection data\n */\n\nexport function wrapApiKeyCollection(http, data) {\n  var apiKeys = toPlainObject(cloneDeep(data));\n  apiKeys.items = apiKeys.items.map(function (entity) {\n    return wrapApiKey(http, entity);\n  });\n  return freezeSys(apiKeys);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/api-key.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createUpdateEntity","createDeleteEntity","createApiKeyApi","http","update","accessToken","preview_api_key","policies","entityPath","wrapperMethod","wrapApiKey","call","delete","data","apiKey","wrapApiKeyCollection","apiKeys","items","map","entity"],"mappings":"AAAA;;;;AAKA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AAEA;;;;;;;;;AASA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAO;AACL;;;;;;;;;;;;;;;;;;;;AAoBAC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,UAAI,iBAAiB,IAArB,EAA2B;AACzB,eAAO,KAAKC,WAAZ;AACD;;AACD,UAAI,qBAAqB,IAAzB,EAA+B;AAC7B,eAAO,KAAKC,eAAZ;AACD;;AACD,UAAI,cAAc,IAAlB,EAAwB;AACtB,eAAO,KAAKC,QAAZ;AACD;;AACD,UAAIH,MAAM,GAAGJ,kBAAkB,CAAC;AAC9BG,QAAAA,IAAI,EAAEA,IADwB;AAE9BK,QAAAA,UAAU,EAAE,UAFkB;AAG9BC,QAAAA,aAAa,EAAEC;AAHe,OAAD,CAA/B;AAKA,aAAON,MAAM,CAACO,IAAP,CAAY,IAAZ,CAAP;AACD,KArCI;;AAuCL;;;;;;;;;;;;;;;;;AAiBAC,IAAAA,MAAM,EAAEX,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBK,MAAAA,UAAU,EAAE;AAFa,KAAD;AAxDrB,GAAP;AA6DD;AAED;;;;;;;;AAMA,OAAO,SAASE,UAAT,CAAoBP,IAApB,EAA0BU,IAA1B,EAAgC;AACrC,MAAIC,MAAM,GAAGhB,aAAa,CAACF,SAAS,CAACiB,IAAD,CAAV,CAA1B;AACAd,EAAAA,kBAAkB,CAACe,MAAD,EAASZ,eAAe,CAACC,IAAD,CAAxB,CAAlB;AACA,SAAON,SAAS,CAACiB,MAAD,CAAhB;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,oBAAT,CAA8BZ,IAA9B,EAAoCU,IAApC,EAA0C;AAC/C,MAAIG,OAAO,GAAGlB,aAAa,CAACF,SAAS,CAACiB,IAAD,CAAV,CAA3B;AACAG,EAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACC,KAAR,CAAcC,GAAd,CAAkB,UAAUC,MAAV,EAAkB;AAClD,WAAOT,UAAU,CAACP,IAAD,EAAOgB,MAAP,CAAjB;AACD,GAFe,CAAhB;AAGA,SAAOtB,SAAS,CAACmB,OAAD,CAAhB;AACD","sourcesContent":["/**\n * Api Key instances\n * @namespace ApiKey\n */\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n\n/**\n * @memberof ApiKey\n * @typedef ApiKey\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} description\n * @prop {function(): Object} toPlainObject() - Returns this Api Key as a plain JS object\n */\n\nfunction createApiKeyApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof ApiKey\n     * @func update\n     * @return {Promise<ApiKey>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey(<api-key-id>))\n     * .then((apiKey) => {\n     *  apiKey.name = 'New name'\n     *  return apiKey.update()\n     * })\n     * .then(apiKey => console.log(apiKey.name))\n     * .catch(console.error)\n     */\n    update: function update() {\n      if ('accessToken' in this) {\n        delete this.accessToken;\n      }\n      if ('preview_api_key' in this) {\n        delete this.preview_api_key;\n      }\n      if ('policies' in this) {\n        delete this.policies;\n      }\n      var update = createUpdateEntity({\n        http: http,\n        entityPath: 'api_keys',\n        wrapperMethod: wrapApiKey\n      });\n      return update.call(this);\n    },\n\n    /**\n     * Deletes this object on the server.\n     * @memberof ApiKey\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey(<api-key-id>))\n     * .then((apiKey) => apiKey.delete())\n     * .then(() => console.log('apikey deleted'))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'api_keys'\n    })\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw api key data\n * @return {ApiKey} Wrapped api key data\n */\nexport function wrapApiKey(http, data) {\n  var apiKey = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(apiKey, createApiKeyApi(http));\n  return freezeSys(apiKey);\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw api key collection data\n * @return {ApiKeyCollection} Wrapped api key collection data\n */\nexport function wrapApiKeyCollection(http, data) {\n  var apiKeys = toPlainObject(cloneDeep(data));\n  apiKeys.items = apiKeys.items.map(function (entity) {\n    return wrapApiKey(http, entity);\n  });\n  return freezeSys(apiKeys);\n}"]},"metadata":{},"sourceType":"module"}