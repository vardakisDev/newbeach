{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createSpaceApi from '../create-space-api';\n/**\n * @memberof Space\n * @typedef Space\n * @prop {Object} sys - System metadata\n * @prop {string} sys.id - Space id\n * @prop {string} sys.type - Entity type\n * @prop {string} name - Space name\n * @prop {function(): Object} toPlainObject() - Returns this Space as a plain JS object\n */\n\n/**\n * @memberof Space\n * @typedef SpaceCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Space.Space>} items\n * @prop {function(): Object} toPlainObject() - Returns this Space collection as a plain JS object\n */\n\n/**\n * This method creates the API for the given space with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a space id, so the base path for requests now has the\n * space id already set.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Space\n * @return {Space}\n */\n\nexport function wrapSpace(http, data) {\n  var space = toPlainObject(cloneDeep(data));\n  var _http$httpClientParam = http.httpClientParams,\n      hostUpload = _http$httpClientParam.hostUpload,\n      defaultHostnameUpload = _http$httpClientParam.defaultHostnameUpload;\n  var spaceScopedHttpClient = http.cloneWithNewParams({\n    space: space.sys.id\n  });\n  var spaceScopedUploadClient = http.cloneWithNewParams({\n    space: space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var spaceApi = createSpaceApi({\n    http: spaceScopedHttpClient,\n    httpUpload: spaceScopedUploadClient\n  });\n  var enhancedSpace = enhanceWithMethods(space, spaceApi);\n  return freezeSys(enhancedSpace);\n}\n/**\n * This method wraps each space in a collection with the space API. See wrapSpace\n * above for more details.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Space collection\n * @return {SpaceCollection}\n */\n\nexport function wrapSpaceCollection(http, data) {\n  var spaces = toPlainObject(cloneDeep(data));\n  spaces.items = spaces.items.map(function (entity) {\n    return wrapSpace(http, entity);\n  });\n  return freezeSys(spaces);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/space.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createSpaceApi","wrapSpace","http","data","space","_http$httpClientParam","httpClientParams","hostUpload","defaultHostnameUpload","spaceScopedHttpClient","cloneWithNewParams","sys","id","spaceScopedUploadClient","host","spaceApi","httpUpload","enhancedSpace","wrapSpaceCollection","spaces","items","map","entity"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;AAUA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AACpC,MAAIC,KAAK,GAAGN,aAAa,CAACF,SAAS,CAACO,IAAD,CAAV,CAAzB;AACA,MAAIE,qBAAqB,GAAGH,IAAI,CAACI,gBAAjC;AAAA,MACIC,UAAU,GAAGF,qBAAqB,CAACE,UADvC;AAAA,MAEIC,qBAAqB,GAAGH,qBAAqB,CAACG,qBAFlD;AAIA,MAAIC,qBAAqB,GAAGP,IAAI,CAACQ,kBAAL,CAAwB;AAClDN,IAAAA,KAAK,EAAEA,KAAK,CAACO,GAAN,CAAUC;AADiC,GAAxB,CAA5B;AAGA,MAAIC,uBAAuB,GAAGX,IAAI,CAACQ,kBAAL,CAAwB;AACpDN,IAAAA,KAAK,EAAEA,KAAK,CAACO,GAAN,CAAUC,EADmC;AAEpDE,IAAAA,IAAI,EAAEP,UAAU,IAAIC;AAFgC,GAAxB,CAA9B;AAIA,MAAIO,QAAQ,GAAGf,cAAc,CAAC;AAC5BE,IAAAA,IAAI,EAAEO,qBADsB;AAE5BO,IAAAA,UAAU,EAAEH;AAFgB,GAAD,CAA7B;AAIA,MAAII,aAAa,GAAGlB,kBAAkB,CAACK,KAAD,EAAQW,QAAR,CAAtC;AACA,SAAOlB,SAAS,CAACoB,aAAD,CAAhB;AACD;AAED;;;;;;;;;AAQA,OAAO,SAASC,mBAAT,CAA6BhB,IAA7B,EAAmCC,IAAnC,EAAyC;AAC9C,MAAIgB,MAAM,GAAGrB,aAAa,CAACF,SAAS,CAACO,IAAD,CAAV,CAA1B;AACAgB,EAAAA,MAAM,CAACC,KAAP,GAAeD,MAAM,CAACC,KAAP,CAAaC,GAAb,CAAiB,UAAUC,MAAV,EAAkB;AAChD,WAAOrB,SAAS,CAACC,IAAD,EAAOoB,MAAP,CAAhB;AACD,GAFc,CAAf;AAGA,SAAOzB,SAAS,CAACsB,MAAD,CAAhB;AACD","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createSpaceApi from '../create-space-api';\n\n/**\n * @memberof Space\n * @typedef Space\n * @prop {Object} sys - System metadata\n * @prop {string} sys.id - Space id\n * @prop {string} sys.type - Entity type\n * @prop {string} name - Space name\n * @prop {function(): Object} toPlainObject() - Returns this Space as a plain JS object\n */\n\n/**\n * @memberof Space\n * @typedef SpaceCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Space.Space>} items\n * @prop {function(): Object} toPlainObject() - Returns this Space collection as a plain JS object\n */\n\n/**\n * This method creates the API for the given space with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a space id, so the base path for requests now has the\n * space id already set.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Space\n * @return {Space}\n */\nexport function wrapSpace(http, data) {\n  var space = toPlainObject(cloneDeep(data));\n  var _http$httpClientParam = http.httpClientParams,\n      hostUpload = _http$httpClientParam.hostUpload,\n      defaultHostnameUpload = _http$httpClientParam.defaultHostnameUpload;\n\n  var spaceScopedHttpClient = http.cloneWithNewParams({\n    space: space.sys.id\n  });\n  var spaceScopedUploadClient = http.cloneWithNewParams({\n    space: space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var spaceApi = createSpaceApi({\n    http: spaceScopedHttpClient,\n    httpUpload: spaceScopedUploadClient\n  });\n  var enhancedSpace = enhanceWithMethods(space, spaceApi);\n  return freezeSys(enhancedSpace);\n}\n\n/**\n * This method wraps each space in a collection with the space API. See wrapSpace\n * above for more details.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Space collection\n * @return {SpaceCollection}\n */\nexport function wrapSpaceCollection(http, data) {\n  var spaces = toPlainObject(cloneDeep(data));\n  spaces.items = spaces.items.map(function (entity) {\n    return wrapSpace(http, entity);\n  });\n  return freezeSys(spaces);\n}"]},"metadata":{},"sourceType":"module"}