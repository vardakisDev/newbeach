{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createEnvironmentApi from '../create-environment-api';\n/**\n * @memberof Environment\n * @typedef Environment\n * @prop {Object} sys - System metadata\n * @prop {string} sys.id - Environment id\n * @prop {string} sys.type - Entity type\n * @prop {string} name - Environment name\n * @prop {function(): Object} toPlainObject() - Returns this Environment as a plain JS object\n */\n\n/**\n * @memberof Environment\n * @typedef SpaceCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Environment.Environment>} items\n * @prop {function(): Object} toPlainObject() - Returns this Environment collection as a plain JS object\n */\n\n/**\n * This method creates the API for the given environment with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a environment id, so the base path for requests now has the\n * environment id already set.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Environment\n * @return {Environment}\n */\n\nexport function wrapEnvironment(http, data) {\n  var environment = toPlainObject(cloneDeep(data));\n  var _http$httpClientParam = http.httpClientParams,\n      hostUpload = _http$httpClientParam.hostUpload,\n      defaultHostnameUpload = _http$httpClientParam.defaultHostnameUpload;\n  var environmentScopedHttpClient = http.cloneWithNewParams({\n    baseURL: http.defaults.baseURL + 'environments/' + environment.sys.id\n  });\n  var environmentScopedUploadClient = http.cloneWithNewParams({\n    space: environment.sys.space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var environmentApi = createEnvironmentApi({\n    http: environmentScopedHttpClient,\n    httpUpload: environmentScopedUploadClient\n  });\n  var enhancedEnvironment = enhanceWithMethods(environment, environmentApi);\n  return freezeSys(enhancedEnvironment);\n}\n/**\n * This method wraps each environment in a collection with the environment API. See wrapEnvironment\n * above for more details.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Environment collection\n * @return {SpaceCollection}\n */\n\nexport function wrapEnvironmentCollection(http, data) {\n  var environments = toPlainObject(cloneDeep(data));\n  environments.items = environments.items.map(function (entity) {\n    return wrapEnvironment(http, entity);\n  });\n  return freezeSys(environments);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/environment.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createEnvironmentApi","wrapEnvironment","http","data","environment","_http$httpClientParam","httpClientParams","hostUpload","defaultHostnameUpload","environmentScopedHttpClient","cloneWithNewParams","baseURL","defaults","sys","id","environmentScopedUploadClient","space","host","environmentApi","httpUpload","enhancedEnvironment","wrapEnvironmentCollection","environments","items","map","entity"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AAEA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;AAUA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,IAA/B,EAAqC;AAC1C,MAAIC,WAAW,GAAGN,aAAa,CAACF,SAAS,CAACO,IAAD,CAAV,CAA/B;AACA,MAAIE,qBAAqB,GAAGH,IAAI,CAACI,gBAAjC;AAAA,MACIC,UAAU,GAAGF,qBAAqB,CAACE,UADvC;AAAA,MAEIC,qBAAqB,GAAGH,qBAAqB,CAACG,qBAFlD;AAIA,MAAIC,2BAA2B,GAAGP,IAAI,CAACQ,kBAAL,CAAwB;AACxDC,IAAAA,OAAO,EAAET,IAAI,CAACU,QAAL,CAAcD,OAAd,GAAwB,eAAxB,GAA0CP,WAAW,CAACS,GAAZ,CAAgBC;AADX,GAAxB,CAAlC;AAGA,MAAIC,6BAA6B,GAAGb,IAAI,CAACQ,kBAAL,CAAwB;AAC1DM,IAAAA,KAAK,EAAEZ,WAAW,CAACS,GAAZ,CAAgBG,KAAhB,CAAsBH,GAAtB,CAA0BC,EADyB;AAE1DG,IAAAA,IAAI,EAAEV,UAAU,IAAIC;AAFsC,GAAxB,CAApC;AAIA,MAAIU,cAAc,GAAGlB,oBAAoB,CAAC;AACxCE,IAAAA,IAAI,EAAEO,2BADkC;AAExCU,IAAAA,UAAU,EAAEJ;AAF4B,GAAD,CAAzC;AAIA,MAAIK,mBAAmB,GAAGrB,kBAAkB,CAACK,WAAD,EAAcc,cAAd,CAA5C;AACA,SAAOrB,SAAS,CAACuB,mBAAD,CAAhB;AACD;AAED;;;;;;;;;AAQA,OAAO,SAASC,yBAAT,CAAmCnB,IAAnC,EAAyCC,IAAzC,EAA+C;AACpD,MAAImB,YAAY,GAAGxB,aAAa,CAACF,SAAS,CAACO,IAAD,CAAV,CAAhC;AACAmB,EAAAA,YAAY,CAACC,KAAb,GAAqBD,YAAY,CAACC,KAAb,CAAmBC,GAAnB,CAAuB,UAAUC,MAAV,EAAkB;AAC5D,WAAOxB,eAAe,CAACC,IAAD,EAAOuB,MAAP,CAAtB;AACD,GAFoB,CAArB;AAGA,SAAO5B,SAAS,CAACyB,YAAD,CAAhB;AACD","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createEnvironmentApi from '../create-environment-api';\n\n/**\n * @memberof Environment\n * @typedef Environment\n * @prop {Object} sys - System metadata\n * @prop {string} sys.id - Environment id\n * @prop {string} sys.type - Entity type\n * @prop {string} name - Environment name\n * @prop {function(): Object} toPlainObject() - Returns this Environment as a plain JS object\n */\n\n/**\n * @memberof Environment\n * @typedef SpaceCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Environment.Environment>} items\n * @prop {function(): Object} toPlainObject() - Returns this Environment collection as a plain JS object\n */\n\n/**\n * This method creates the API for the given environment with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a environment id, so the base path for requests now has the\n * environment id already set.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Environment\n * @return {Environment}\n */\nexport function wrapEnvironment(http, data) {\n  var environment = toPlainObject(cloneDeep(data));\n  var _http$httpClientParam = http.httpClientParams,\n      hostUpload = _http$httpClientParam.hostUpload,\n      defaultHostnameUpload = _http$httpClientParam.defaultHostnameUpload;\n\n  var environmentScopedHttpClient = http.cloneWithNewParams({\n    baseURL: http.defaults.baseURL + 'environments/' + environment.sys.id\n  });\n  var environmentScopedUploadClient = http.cloneWithNewParams({\n    space: environment.sys.space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var environmentApi = createEnvironmentApi({\n    http: environmentScopedHttpClient,\n    httpUpload: environmentScopedUploadClient\n  });\n  var enhancedEnvironment = enhanceWithMethods(environment, environmentApi);\n  return freezeSys(enhancedEnvironment);\n}\n\n/**\n * This method wraps each environment in a collection with the environment API. See wrapEnvironment\n * above for more details.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Environment collection\n * @return {SpaceCollection}\n */\nexport function wrapEnvironmentCollection(http, data) {\n  var environments = toPlainObject(cloneDeep(data));\n  environments.items = environments.items.map(function (entity) {\n    return wrapEnvironment(http, entity);\n  });\n  return freezeSys(environments);\n}"]},"metadata":{},"sourceType":"module"}