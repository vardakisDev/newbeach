{"ast":null,"code":"/**\n * Space Membership instances\n * @namespace SpaceMembership\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n/**\n * @memberof SpaceMembership\n * @typedef SpaceMembership\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {boolean} admin - User is an admin\n * @prop {array} roles - Array of Role Links\n * @prop {function(): Object} toPlainObject() - Returns this Space Membership as a plain JS object\n */\n\nfunction createSpaceMembershipApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof SpaceMembership\n     * @func update\n     * @return {Promise<SpaceMembership>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('<spaceMembership_id>'))\n     * .then((spaceMembership) => {\n     *  spaceMembership.name = 'new space membership name'\n     * })\n     * .then((spaceMembership) => console.log(`spaceMembership ${spaceMembership.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'space_memberships',\n      wrapperMethod: wrapSpaceMembership\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof SpaceMembership\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('<spaceMembership_id>'))\n     * .then((spaceMembership) => spaceMembership.delete())\n     * .then(() => console.log(`spaceMembership deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'space_memberships'\n    })\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw space membership data\n * @return {SpaceMembership} Wrapped space membership data\n */\n\n\nexport function wrapSpaceMembership(http, data) {\n  var spaceMembership = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(spaceMembership, createSpaceMembershipApi(http));\n  return freezeSys(spaceMembership);\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw space membership collection data\n * @return {SpaceMembershipCollection} Wrapped space membership collection data\n */\n\nexport function wrapSpaceMembershipCollection(http, data) {\n  var spaceMemberships = toPlainObject(cloneDeep(data));\n  spaceMemberships.items = spaceMemberships.items.map(function (entity) {\n    return wrapSpaceMembership(http, entity);\n  });\n  return freezeSys(spaceMemberships);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/space-membership.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createUpdateEntity","createDeleteEntity","createSpaceMembershipApi","http","update","entityPath","wrapperMethod","wrapSpaceMembership","delete","data","spaceMembership","wrapSpaceMembershipCollection","spaceMemberships","items","map","entity"],"mappings":"AAAA;;;;AAKA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AAEA;;;;;;;;;;AAUA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AACtC,SAAO;AAEL;;;;;;;;;;;;;;;;;;;;AAoBAC,IAAAA,MAAM,EAAEJ,kBAAkB,CAAC;AACzBG,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE,mBAFa;AAGzBC,MAAAA,aAAa,EAAEC;AAHU,KAAD,CAtBrB;;AA4BL;;;;;;;;;;;;;;;;;;AAkBAC,IAAAA,MAAM,EAAEP,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE;AAFa,KAAD;AA9CrB,GAAP;AAmDD;AAED;;;;;;;;AAMA,OAAO,SAASE,mBAAT,CAA6BJ,IAA7B,EAAmCM,IAAnC,EAAyC;AAC9C,MAAIC,eAAe,GAAGZ,aAAa,CAACF,SAAS,CAACa,IAAD,CAAV,CAAnC;AACAV,EAAAA,kBAAkB,CAACW,eAAD,EAAkBR,wBAAwB,CAACC,IAAD,CAA1C,CAAlB;AACA,SAAON,SAAS,CAACa,eAAD,CAAhB;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,6BAAT,CAAuCR,IAAvC,EAA6CM,IAA7C,EAAmD;AACxD,MAAIG,gBAAgB,GAAGd,aAAa,CAACF,SAAS,CAACa,IAAD,CAAV,CAApC;AACAG,EAAAA,gBAAgB,CAACC,KAAjB,GAAyBD,gBAAgB,CAACC,KAAjB,CAAuBC,GAAvB,CAA2B,UAAUC,MAAV,EAAkB;AACpE,WAAOR,mBAAmB,CAACJ,IAAD,EAAOY,MAAP,CAA1B;AACD,GAFwB,CAAzB;AAGA,SAAOlB,SAAS,CAACe,gBAAD,CAAhB;AACD","sourcesContent":["/**\n * Space Membership instances\n * @namespace SpaceMembership\n */\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n\n/**\n * @memberof SpaceMembership\n * @typedef SpaceMembership\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {boolean} admin - User is an admin\n * @prop {array} roles - Array of Role Links\n * @prop {function(): Object} toPlainObject() - Returns this Space Membership as a plain JS object\n */\n\nfunction createSpaceMembershipApi(http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof SpaceMembership\n     * @func update\n     * @return {Promise<SpaceMembership>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('<spaceMembership_id>'))\n     * .then((spaceMembership) => {\n     *  spaceMembership.name = 'new space membership name'\n     * })\n     * .then((spaceMembership) => console.log(`spaceMembership ${spaceMembership.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'space_memberships',\n      wrapperMethod: wrapSpaceMembership\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof SpaceMembership\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('<spaceMembership_id>'))\n     * .then((spaceMembership) => spaceMembership.delete())\n     * .then(() => console.log(`spaceMembership deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'space_memberships'\n    })\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw space membership data\n * @return {SpaceMembership} Wrapped space membership data\n */\nexport function wrapSpaceMembership(http, data) {\n  var spaceMembership = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(spaceMembership, createSpaceMembershipApi(http));\n  return freezeSys(spaceMembership);\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw space membership collection data\n * @return {SpaceMembershipCollection} Wrapped space membership collection data\n */\nexport function wrapSpaceMembershipCollection(http, data) {\n  var spaceMemberships = toPlainObject(cloneDeep(data));\n  spaceMemberships.items = spaceMemberships.items.map(function (entity) {\n    return wrapSpaceMembership(http, entity);\n  });\n  return freezeSys(spaceMemberships);\n}"]},"metadata":{},"sourceType":"module"}