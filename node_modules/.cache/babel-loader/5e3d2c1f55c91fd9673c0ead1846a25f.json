{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Contentful Space API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n * @namespace ContentfulSpaceAPI\n */\n\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n/**\n * @memberof ContentfulSpaceAPI\n * @typedef {object} ContentfulSpaceAPI\n * @prop {function} delete\n * @prop {function} update\n * @prop {function} getEnvironment\n * @prop {function} getEnvironments\n * @prop {function} createEnvironment\n * @prop {function} createEnvironmentWithId\n * @prop {function} getContentType\n * @prop {function} getContentTypes\n * @prop {function} createContentType\n * @prop {function} createContentTypeWithId\n * @prop {function} getEntry\n * @prop {function} getEntries\n * @prop {function} createEntry\n * @prop {function} createEntryWithId\n * @prop {function} getAsset\n * @prop {function} getAssets\n * @prop {function} createAsset\n * @prop {function} createAssetWithId\n * @prop {function} getLocale\n * @prop {function} getLocales\n * @prop {function} createLocale\n * @prop {function} getWebhook\n * @prop {function} getWebhooks\n * @prop {function} createWebhook\n * @prop {function} createWebhookWithId\n * @prop {function} getRole\n * @prop {function} getRoles\n * @prop {function} createRole\n * @prop {function} createRoleWithId\n * @prop {function} getSpaceMembership\n * @prop {function} getSpaceMemberships\n * @prop {function} createSpaceMembership\n * @prop {function} createSpaceMembershipWithId\n * @prop {function} getApiKey\n * @prop {function} getApiKeys\n * @prop {function} createApiKey\n * @prop {function} createApiKeyWithId\n * @prop {function} getUiExtension\n * @prop {function} getUiExtensions\n * @prop {function} createUiExtension\n * @prop {function} createUiExtensionWithId\n * @prop {function} getEntrySnapshots\n * @prop {function} getContentTypeSnapshots\n * @prop {function} getEnvironmentAliases\n * @prop {function} getEnvironmentAlias\n */\n\nfunction raiseDeprecationWarning(method) {\n  console.warn(['Deprecated: Space.' + method + '() will be removed in future major versions.', null, 'Please migrate your code to use Environment.' + method + '():', 'https://contentful.github.io/contentful-management.js/contentful-management/latest/ContentfulEnvironmentAPI.html#.' + method, null].join('\\n'));\n}\n/**\n * Creates API object with methods to access the Space API\n * @private\n * @param {object} params - API initialization params\n * @prop {object} http - HTTP client instance\n * @prop {object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulSpaceAPI}\n */\n\n\nexport default function createSpaceApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapSpace = entities.space.wrapSpace;\n  var _entities$environment = entities.environment,\n      wrapEnvironment = _entities$environment.wrapEnvironment,\n      wrapEnvironmentCollection = _entities$environment.wrapEnvironmentCollection;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var _entities$webhook = entities.webhook,\n      wrapWebhook = _entities$webhook.wrapWebhook,\n      wrapWebhookCollection = _entities$webhook.wrapWebhookCollection;\n  var _entities$role = entities.role,\n      wrapRole = _entities$role.wrapRole,\n      wrapRoleCollection = _entities$role.wrapRoleCollection;\n  var _entities$spaceMember = entities.spaceMembership,\n      wrapSpaceMembership = _entities$spaceMember.wrapSpaceMembership,\n      wrapSpaceMembershipCollection = _entities$spaceMember.wrapSpaceMembershipCollection;\n  var _entities$apiKey = entities.apiKey,\n      wrapApiKey = _entities$apiKey.wrapApiKey,\n      wrapApiKeyCollection = _entities$apiKey.wrapApiKeyCollection;\n  var _entities$previewApiK = entities.previewApiKey,\n      wrapPreviewApiKey = _entities$previewApiK.wrapPreviewApiKey,\n      wrapPreviewApiKeyCollection = _entities$previewApiK.wrapPreviewApiKeyCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  var _entities$environment2 = entities.environmentAlias,\n      wrapEnvironmentAlias = _entities$environment2.wrapEnvironmentAlias,\n      wrapEnvironmentAliasCollection = _entities$environment2.wrapEnvironmentAliasCollection;\n  /**\n   * Space instances.\n   * @namespace Space\n   */\n\n  /**\n   * Deletes the space\n   * @memberof Space\n   * @func delete\n   * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.delete())\n   * .then(() => console.log('Space deleted.'))\n   * .catch(console.error)\n  */\n\n  function deleteSpace() {\n    return http.delete('').then(function (response) {}, errorHandler);\n  }\n  /**\n   * Updates the space\n   * @memberof Space\n   * @func update\n   * @return {Promise<Space.Space>} Promise for the updated space.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => {\n   *   space.name = 'New name'\n   *   return space.update()\n   * })\n   * .then((space) => console.log(`Space ${space.sys.id} renamed.`)\n   * .catch(console.error)\n  */\n\n\n  function updateSpace() {\n    var raw = this.toPlainObject();\n    var data = cloneDeep(raw);\n    delete data.sys;\n    return http.put('', data, {\n      headers: {\n        'X-Contentful-Version': raw.sys.version\n      }\n    }).then(function (response) {\n      return wrapSpace(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an environment\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Environment ID\n   * @return {Promise<Environment.Environment>} Promise for an Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environement_id>'))\n   * .then((environment) => console.log(environment))\n   * .catch(console.error)\n   */\n\n\n  function getEnvironment(id) {\n    return http.get('environments/' + id).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Environments\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Environment.EnvironmentCollection>} Promise for a collection of Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironments())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getEnvironments() {\n    return http.get('environments').then(function (response) {\n      return wrapEnvironmentCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates an Environement\n   * @memberof ContentfulSpaceAPI\n   * @see {Environment}\n   * @param {object=} data - Object representation of the Environment to be created\n   * @return {Promise<Environment.Environment>} Promise for the newly created Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEnvironment({ name: 'Staging' }))\n   * .then((environment) => console.log(environment))\n   * .catch(console.error)\n   */\n\n\n  function createEnvironment() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return http.post('environments', data).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates an Environment with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {Environment}\n   * @param {string} id - Environment ID\n   * @param {object=} data - Object representation of the Environment to be created\n   * @param {string=} sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is \"master\"\n   * @return {Promise<Environment.Environment>} Promise for the newly created Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))\n   * .then((environment) => console.log(environment))\n   * .catch(console.error)\n   */\n\n\n  function createEnvironmentWithId(id) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var sourceEnvironmentId = arguments[2];\n    return http.put('environments/' + id, data, {\n      headers: sourceEnvironmentId ? {\n        'X-Contentful-Source-Environment': sourceEnvironmentId\n      } : {}\n    }).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a Content Type\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Content Type ID\n   * @return {Promise<ContentType.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getContentType('<content_type_id>'))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n\n\n  function getContentType(id) {\n    raiseDeprecationWarning('getContentType');\n    return http.get('content_types/' + id).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an EditorInterface for a ContentType\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} contentTypeId - Content Type ID\n   * @return {Promise<EditorInterface.EditorInterface>} Promise for an EditorInterface\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEditorInterfaceForContentType('<content_type_id>'))\n   * .then((EditorInterface) => console.log(EditorInterface))\n   * .catch(console.error)\n   */\n\n\n  function getEditorInterfaceForContentType(contentTypeId) {\n    raiseDeprecationWarning('getEditorInterfaceForContentType');\n    return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n      return wrapEditorInterface(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Content Types\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<ContentType.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getContentTypes())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getContentTypes() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    raiseDeprecationWarning('getContentTypes');\n    return http.get('content_types', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapContentTypeCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Content Type\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {ContentType}\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createContentType({\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n\n\n  function createContentType(data) {\n    raiseDeprecationWarning('createContentType');\n    return http.post('content_types', data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Content Type with a custom ID\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {ContentType.ContentType}\n   * @param {string} id - Content Type ID\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createContentTypeWithId('<content-type-id>', {\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n\n\n  function createContentTypeWithId(id, data) {\n    raiseDeprecationWarning('createContentTypeWithId');\n    return http.put('content_types/' + id, data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an Entry\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Entry ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entry.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEntry('<entry-id>'))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n\n\n  function getEntry(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    raiseDeprecationWarning('getEntry');\n    normalizeSelect(query);\n    return http.get('entries/' + id, createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Entries\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entry.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getEntries() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    raiseDeprecationWarning('getEntries');\n    normalizeSelect(query);\n    return http.get('entries', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapEntryCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Entry\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type which this Entry is based on\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEntry('<content_type_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n\n\n  function createEntry(contentTypeId, data) {\n    raiseDeprecationWarning('createEntry');\n    return http.post('entries', data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Entry with a custom ID\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type which this Entry is based on\n   * @param {string} id - Entry ID\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create entry\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEntryWithId('<content_type_id>', '<entry_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n\n\n  function createEntryWithId(contentTypeId, id, data) {\n    raiseDeprecationWarning('createEntryWithId');\n    return http.put('entries/' + id, data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an Asset\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Asset ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Asset.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getAsset('<asset_id>'))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n  */\n\n\n  function getAsset(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    raiseDeprecationWarning('getAsset');\n    normalizeSelect(query);\n    return http.get('assets/' + id, createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Assets\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Asset.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getAssets())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getAssets() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    raiseDeprecationWarning('getAssets');\n    normalizeSelect(query);\n    return http.get('assets', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapAssetCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createAsset({\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Playsam Streamliner'\n   *    },\n   *    file: {\n   *       'en-US': {\n   *         contentType: 'image/jpeg',\n   *        fileName: 'example.jpeg',\n   *        upload: 'https://example.com/example.jpg'\n   *      }\n   *    }\n   *   }\n   * }))\n   * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n\n\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {string} id - Asset ID\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createAssetWithId('<asset_id>', {\n   *   title: {\n   *     'en-US': 'Playsam Streamliner'\n   *   },\n   *   file: {\n   *     'en-US': {\n   *       contentType: 'image/jpeg',\n   *       fileName: 'example.jpeg',\n   *       upload: 'https://example.com/example.jpg'\n   *     }\n   *   }\n   * }))\n   * .then((asset) => asset.process())\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n\n\n  function createAssetWithId(id, data) {\n    raiseDeprecationWarning('createAssetWithId');\n    return http.put('assets/' + id, data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @param {object} data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createAssetFromFiles({\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          file: createReadStream('path/to/filename_english.jpg')\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/svg+xml',\n   *          fileName: 'filename_german.svg',\n   *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n   *       }\n   *     }\n   *   }\n   * }))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n\n\n  function createAssetFromFiles(data) {\n    raiseDeprecationWarning('createAssetFromFiles');\n    var file = data.fields.file;\n    return Promise.all(Object.keys(file).map(function (locale) {\n      var _file$locale = file[locale],\n          contentType = _file$locale.contentType,\n          fileName = _file$locale.fileName;\n      return createUpload(file[locale]).then(function (upload) {\n        return _defineProperty({}, locale, {\n          contentType: contentType,\n          fileName: fileName,\n          uploadFrom: {\n            sys: {\n              type: 'Link',\n              linkType: 'Upload',\n              id: upload.sys.id\n            }\n          }\n        });\n      });\n    })).then(function (uploads) {\n      data.fields.file = uploads.reduce(function (fieldsData, upload) {\n        return _extends({}, fieldsData, upload);\n      }, {});\n      return createAsset(data);\n    }).catch(errorHandler);\n  }\n  /**\n   * Creates a Upload.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {object} data - Object with file information.\n   * @param {object} data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Upload>} Upload object containing information about the uploaded file.\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createUpload({file: uploadStream, 'image/png'})\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n\n\n  function createUpload(data) {\n    raiseDeprecationWarning('createUpload');\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    }).catch(errorHandler);\n  }\n  /**\n   * Gets an Upload\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Upload ID\n   * @return {Promise<Upload>} Promise for an Upload\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getUpload('<upload-id>')\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n\n\n  function getUpload(id) {\n    raiseDeprecationWarning('getUpload');\n    return httpUpload.get('uploads/' + id).then(function (response) {\n      return wrapUpload(http, response.data);\n    }).catch(errorHandler);\n  }\n  /**\n   * Gets a Locale\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Locale ID\n   * @return {Promise<Locale.Locale>} Promise for an Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getLocale('<locale_id>'))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n  */\n\n\n  function getLocale(id) {\n    raiseDeprecationWarning('getLocale');\n    return http.get('locales/' + id).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Locales\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Locale.LocaleCollection>} Promise for a collection of Locales\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getLocales())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n\n\n  function getLocales() {\n    raiseDeprecationWarning('getLocales');\n    return http.get('locales').then(function (response) {\n      return wrapLocaleCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Locale\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Locale.Locale}\n   * @param {object} data - Object representation of the Locale to be created\n   * @return {Promise<Locale.Locale>} Promise for the newly created Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create locale\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createLocale({\n   *   name: 'German (Austria)',\n   *   code: 'de-AT',\n   *   fallbackCode: 'de-DE',\n   *   optional: true\n   * }))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n   */\n\n\n  function createLocale(data) {\n    raiseDeprecationWarning('createLocale');\n    return http.post('locales', data).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a Webhook\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Webhook ID\n   * @return {Promise<Webhook.Webhook>} Promise for a Webhook\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getWebhook('<webhook_id>'))\n   * .then((webhook) => console.log(webhook))\n   * .catch(console.error)\n  */\n\n\n  function getWebhook(id) {\n    return http.get('webhook_definitions/' + id).then(function (response) {\n      return wrapWebhook(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Webhooks\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Webhook.WebhookCollection>} Promise for a collection of Webhooks\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getWebhooks())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getWebhooks() {\n    return http.get('webhook_definitions').then(function (response) {\n      return wrapWebhookCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Webhook\n   * @memberof ContentfulSpaceAPI\n   * @see {Webhook.Webhook}\n   * @param {object} data - Object representation of the Webhook to be created\n   * @return {Promise<Webhook.Webhook>} Promise for the newly created Webhook\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createWebhook({\n   *   'name': 'My webhook',\n   *   'url': 'https://www.example.com/test',\n   *   'topics': [\n   *     'Entry.create',\n   *     'ContentType.create',\n   *     '*.publish',\n   *     'Asset.*'\n   *   ]\n   * }))\n   * .then((webhook) => console.log(webhook))\n   * .catch(console.error)\n   */\n\n\n  function createWebhook(data) {\n    return http.post('webhook_definitions', data).then(function (response) {\n      return wrapWebhook(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Webhook with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {Webhook.Webhook}\n   * @param {string} id - Webhook ID\n   * @param {object} data - Object representation of the Webhook to be created\n   * @return {Promise<Webhook.Webhook>} Promise for the newly created Webhook\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createWebhookWithId('<webhook_id>', {\n   *   'name': 'My webhook',\n   *   'url': 'https://www.example.com/test',\n   *   'topics': [\n   *     'Entry.create',\n   *     'ContentType.create',\n   *     '*.publish',\n   *     'Asset.*'\n   *   ]\n   * }))\n   * .then((webhook) => console.log(webhook))\n   * .catch(console.error)\n   */\n\n\n  function createWebhookWithId(id, data) {\n    return http.put('webhook_definitions/' + id, data).then(function (response) {\n      return wrapWebhook(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a Space Membership\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Space Membership ID\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for a Space Membership\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getSpaceMembership('id'))\n   * .then((spaceMembership) => console.log(spaceMembership))\n   * .catch(console.error)\n   */\n\n\n  function getSpaceMembership(id) {\n    return http.get('space_memberships/' + id).then(function (response) {\n      return wrapSpaceMembership(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Space Memberships\n   * @memberof ContentfulSpaceAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<SpaceMembership.SpaceMembershipCollection>} Promise for a collection of Space Memberships\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getSpaceMemberships() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return http.get('space_memberships', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapSpaceMembershipCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Space Membership\n   * @memberof ContentfulSpaceAPI\n   * @see {SpaceMembership.SpaceMembership}\n   * @param {object} data - Object representation of the Space Membership to be created\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for the newly created Space Membership\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createSpaceMembership({\n   *   admin: false,\n   *   roles: [\n   *     {\n   *       type: 'Link',\n   *       linkType: 'Role',\n   *       id: '<role_id>'\n   *     }\n   *   ],\n   *   email: 'foo@example.com'\n   * }))\n   * .then((spaceMembership) => console.log(spaceMembership))\n   * .catch(console.error)\n   */\n\n\n  function createSpaceMembership(data) {\n    return http.post('space_memberships', data).then(function (response) {\n      return wrapSpaceMembership(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Space Membership with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {SpaceMembership.SpaceMembership}\n   * @param {string} id - Space Membership ID\n   * @param {object} data - Object representation of the Space Membership to be created\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for the newly created Space Membership\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {\n   *   admin: false,\n   *   roles: [\n   *     {\n   *       type: 'Link',\n   *       linkType: 'Role',\n   *       id: '<role_id>'\n   *     }\n   *   ],\n   *   email: 'foo@example.com'\n   * }))\n   * .then((spaceMembership) => console.log(spaceMembership))\n   * .catch(console.error)\n   */\n\n\n  function createSpaceMembershipWithId(id, data) {\n    return http.put('space_memberships/' + id, data).then(function (response) {\n      return wrapSpaceMembership(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a Role\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Role ID\n   * @return {Promise<Role.Role>} Promise for a Role\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createRole({\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Role title'\n   *     }\n   *   }\n   * }))\n   * .then((role) => console.log(role))\n   * .catch(console.error)\n  */\n\n\n  function getRole(id) {\n    return http.get('roles/' + id).then(function (response) {\n      return wrapRole(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Roles\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Role.RoleCollection>} Promise for a collection of Roles\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getRoles())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getRoles() {\n    return http.get('roles').then(function (response) {\n      return wrapRoleCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Role\n   * @memberof ContentfulSpaceAPI\n   * @see {Role.Role}\n   * @param {object} data - Object representation of the Role to be created\n   * @return {Promise<Role.Role>} Promise for the newly created Role\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createRole({\n   *   name: 'My Role',\n   *   description: 'foobar role',\n   *   permissions: {\n   *     ContentDelivery: 'all',\n   *     ContentModel: ['read'],\n   *     Settings: []\n   *   },\n   *   policies: [\n   *     {\n   *       effect: 'allow',\n   *       actions: 'all',\n   *       constraint: {\n   *         and: [\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Entry'\n   *             ]\n   *           },\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Asset'\n   *             ]\n   *           }\n   *         ]\n   *       }\n   *     }\n   *   ]\n   * }))\n   * .then((role) => console.log(role))\n   * .catch(console.error)\n   */\n\n\n  function createRole(data) {\n    return http.post('roles', data).then(function (response) {\n      return wrapRole(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Role with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {Role.Role}\n   * @param {string} id - Role ID\n   * @param {object} data - Object representation of the Role to be created\n   * @return {Promise<Role.Role>} Promise for the newly created Role\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createRoleWithId('<role-id>', {\n   *   name: 'My Role',\n   *   description: 'foobar role',\n   *   permissions: {\n   *     ContentDelivery: 'all',\n   *     ContentModel: ['read'],\n   *     Settings: []\n   *   },\n   *   policies: [\n   *     {\n   *       effect: 'allow',\n   *       actions: 'all',\n   *       constraint: {\n   *         and: [\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Entry'\n   *             ]\n   *           },\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Asset'\n   *             ]\n   *           }\n   *         ]\n   *       }\n   *     }\n   *   ]\n   * }))\n   * .then((role) => console.log(role))\n   * .catch(console.error)\n   */\n\n\n  function createRoleWithId(id, data) {\n    return http.put('roles/' + id, data).then(function (response) {\n      return wrapRole(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a Api Key\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - API Key ID\n   * @return {Promise<ApiKey.ApiKey>} Promise for a Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getApiKey('<apikey-id>'))\n   * .then((apikey) => console.log(apikey))\n   * .catch(console.error)\n   */\n\n\n  function getApiKey(id) {\n    return http.get('api_keys/' + id).then(function (response) {\n      return wrapApiKey(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Api Keys\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<ApiKey.ApiKeyCollection>} Promise for a collection of Api Keys\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getApiKeys())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getApiKeys() {\n    return http.get('api_keys').then(function (response) {\n      return wrapApiKeyCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a preview Api Key\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Preview API Key ID\n   * @return {Promise<PreviewApiKey.PreviewApiKey>} Promise for a Preview Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))\n   * .then((previewApikey) => console.log(previewApikey))\n   * .catch(console.error)\n   */\n\n\n  function getPreviewApiKey(id) {\n    return http.get('preview_api_keys/' + id).then(function (response) {\n      return wrapPreviewApiKey(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of preview Api Keys\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<PreviewApiKey.PreviewApiKeyCollection>} Promise for a collection of Preview Api Keys\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getPreviewApiKeys())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getPreviewApiKeys() {\n    return http.get('preview_api_keys').then(function (response) {\n      return wrapPreviewApiKeyCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Api Key\n   * @memberof ContentfulSpaceAPI\n   * @see {ApiKey.ApiKey}\n   * @param {object} data - Object representation of the Api Key to be created\n   * @return {Promise<ApiKey.ApiKey>} Promise for the newly created Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createApiKey({\n   *   name: 'API Key name',\n   *   environments:[\n   *    {\n   *     sys: {\n   *      type: 'Link'\n   *      linkType: 'Environment',\n   *      id:'<environment_id>'\n   *     }\n   *    }\n   *   ]\n   *   }\n   * }))\n   * .then((apiKey) => console.log(apiKey))\n   * .catch(console.error)\n  */\n\n\n  function createApiKey(data) {\n    return http.post('api_keys', data).then(function (response) {\n      return wrapApiKey(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Api Key with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {ApiKey.ApiKey}\n   * @param {string} id - Api Key ID\n   * @param {object} data - Object representation of the Api Key to be created\n   * @return {Promise<ApiKey.ApiKey>} Promise for the newly created Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createApiKeyWithId('<api-key-id>', {\n   *   name: 'API Key name'\n   *   environments:[\n   *    {\n   *     sys: {\n   *      type: 'Link'\n   *      linkType: 'Environment',\n   *      id:'<environment_id>'\n   *     }\n   *    }\n   *   ]\n   *   }\n   * }))\n   * .then((apiKey) => console.log(apiKey))\n   * .catch(console.error)\n   */\n\n\n  function createApiKeyWithId(id, data) {\n    return http.put('api_keys/' + id, data).then(function (response) {\n      return wrapApiKey(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an UI Extension\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - UI Extension ID\n   * @return {Promise<UiExtension.UiExtension>} Promise for an UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getUiExtension('<extension-id>'))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n\n\n  function getUiExtension(id) {\n    raiseDeprecationWarning('getUiExtension');\n    return http.get('extensions/' + id).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of UI Extension\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<UiExtension.UiExtensionCollection>} Promise for a collection of UI Extensions\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getUiExtensions()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getUiExtensions() {\n    raiseDeprecationWarning('getUiExtensions');\n    return http.get('extensions').then(function (response) {\n      return wrapUiExtensionCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a UI Extension\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {UiExtension.UiExtension}\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createUiExtension({\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n\n\n  function createUiExtension(data) {\n    raiseDeprecationWarning('createUiExtension');\n    return http.post('extensions', data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a UI Extension with a custom ID\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {UiExtension.UiExtension}\n   * @param {string} id - UI Extension ID\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createUiExtensionWithId('<extension_id>', {\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n\n\n  function createUiExtensionWithId(id, data) {\n    raiseDeprecationWarning('createUiExtensionWithId');\n    return http.put('extensions/' + id, data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets all snapshots of an entry\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @func getEntrySnapshots\n   * @param {string} entryId - Entry ID\n   * @param {object=} query - additional query paramaters\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Entry Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEntrySnapshots('<entry_id>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n\n\n  function getEntrySnapshots(entryId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    raiseDeprecationWarning('getEntrySnapshots');\n    return http.get('entries/' + entryId + '/snapshots', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets all snapshots of a contentType\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @func getContentTypeSnapshots\n   * @param {string} contentTypeId - Content Type ID\n   * @param {object=} query - additional query paramaters\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Content Type Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getContentTypeSnapshots('<contentTypeId>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n\n\n  function getContentTypeSnapshots(contentTypeId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    raiseDeprecationWarning('getContentTypeSnapshots');\n    return http.get('content_types/' + contentTypeId + '/snapshots', createRequestConfig({\n      query: query\n    })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets an Environment Alias\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Environment Alias ID\n   * @return {Promise<EnvironmentAlias.EnvironmentAlias>} Promise for an Environment Alias\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironmentAlias('<alias-id>'))\n   * .then((alias) => console.log(alias))\n   * .catch(console.error)\n   */\n\n\n  function getEnvironmentAlias(id) {\n    return http.get('environment_aliases/' + id).then(function (response) {\n      return wrapEnvironmentAlias(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Gets a collection of Environment Aliases\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<EnvironmentAlias.EnvironmentAliasCollection>} Promise for a collection of Environment Aliases\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironmentAliases()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n\n\n  function getEnvironmentAliases() {\n    return http.get('environment_aliases').then(function (response) {\n      return wrapEnvironmentAliasCollection(http, response.data);\n    }, errorHandler);\n  }\n  /*\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   *\n   */\n\n\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    delete: deleteSpace,\n    update: updateSpace,\n    getEnvironment: getEnvironment,\n    getEnvironments: getEnvironments,\n    createEnvironment: createEnvironment,\n    createEnvironmentWithId: createEnvironmentWithId,\n    getContentType: getContentType,\n    getContentTypes: getContentTypes,\n    createContentType: createContentType,\n    createContentTypeWithId: createContentTypeWithId,\n    getEditorInterfaceForContentType: getEditorInterfaceForContentType,\n    getEntry: getEntry,\n    getEntries: getEntries,\n    createEntry: createEntry,\n    createEntryWithId: createEntryWithId,\n    getAsset: getAsset,\n    getAssets: getAssets,\n    createAsset: createAsset,\n    createAssetWithId: createAssetWithId,\n    createAssetFromFiles: createAssetFromFiles,\n    getUpload: getUpload,\n    createUpload: createUpload,\n    getLocale: getLocale,\n    getLocales: getLocales,\n    createLocale: createLocale,\n    getWebhook: getWebhook,\n    getWebhooks: getWebhooks,\n    createWebhook: createWebhook,\n    createWebhookWithId: createWebhookWithId,\n    getRole: getRole,\n    getRoles: getRoles,\n    createRole: createRole,\n    createRoleWithId: createRoleWithId,\n    getSpaceMembership: getSpaceMembership,\n    getSpaceMemberships: getSpaceMemberships,\n    createSpaceMembership: createSpaceMembership,\n    createSpaceMembershipWithId: createSpaceMembershipWithId,\n    getApiKey: getApiKey,\n    getApiKeys: getApiKeys,\n    getPreviewApiKeys: getPreviewApiKeys,\n    getPreviewApiKey: getPreviewApiKey,\n    createApiKey: createApiKey,\n    createApiKeyWithId: createApiKeyWithId,\n    getUiExtension: getUiExtension,\n    getUiExtensions: getUiExtensions,\n    createUiExtension: createUiExtension,\n    createUiExtensionWithId: createUiExtensionWithId,\n    getEntrySnapshots: getEntrySnapshots,\n    getContentTypeSnapshots: getContentTypeSnapshots,\n    getEnvironmentAlias: getEnvironmentAlias,\n    getEnvironmentAliases: getEnvironmentAliases\n  };\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/create-space-api.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","cloneDeep","createRequestConfig","errorHandler","entities","raiseDeprecationWarning","method","console","warn","join","createSpaceApi","_ref","http","httpUpload","wrapSpace","space","_entities$environment","environment","wrapEnvironment","wrapEnvironmentCollection","_entities$contentType","contentType","wrapContentType","wrapContentTypeCollection","_entities$entry","entry","wrapEntry","wrapEntryCollection","_entities$asset","asset","wrapAsset","wrapAssetCollection","_entities$locale","locale","wrapLocale","wrapLocaleCollection","_entities$webhook","webhook","wrapWebhook","wrapWebhookCollection","_entities$role","role","wrapRole","wrapRoleCollection","_entities$spaceMember","spaceMembership","wrapSpaceMembership","wrapSpaceMembershipCollection","_entities$apiKey","apiKey","wrapApiKey","wrapApiKeyCollection","_entities$previewApiK","previewApiKey","wrapPreviewApiKey","wrapPreviewApiKeyCollection","wrapSnapshotCollection","snapshot","wrapEditorInterface","editorInterface","wrapUpload","upload","_entities$uiExtension","uiExtension","wrapUiExtension","wrapUiExtensionCollection","_entities$environment2","environmentAlias","wrapEnvironmentAlias","wrapEnvironmentAliasCollection","deleteSpace","delete","then","response","updateSpace","raw","toPlainObject","data","sys","put","headers","version","getEnvironment","id","get","getEnvironments","createEnvironment","undefined","post","createEnvironmentWithId","sourceEnvironmentId","getContentType","getEditorInterfaceForContentType","contentTypeId","getContentTypes","query","createContentType","createContentTypeWithId","getEntry","normalizeSelect","getEntries","createEntry","createEntryWithId","getAsset","getAssets","createAsset","createAssetWithId","createAssetFromFiles","file","fields","Promise","all","keys","map","_file$locale","fileName","createUpload","uploadFrom","type","linkType","uploads","reduce","fieldsData","catch","reject","Error","uploadResponse","getUpload","getLocale","getLocales","createLocale","getWebhook","getWebhooks","createWebhook","createWebhookWithId","getSpaceMembership","getSpaceMemberships","createSpaceMembership","createSpaceMembershipWithId","getRole","getRoles","createRole","createRoleWithId","getApiKey","getApiKeys","getPreviewApiKey","getPreviewApiKeys","createApiKey","createApiKeyWithId","getUiExtension","getUiExtensions","createUiExtension","createUiExtensionWithId","getEntrySnapshots","entryId","getContentTypeSnapshots","getEnvironmentAlias","getEnvironmentAliases","select","test","update"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,SAASS,eAAT,CAAyBC,GAAzB,EAA8BL,GAA9B,EAAmCM,KAAnC,EAA0C;AAAE,MAAIN,GAAG,IAAIK,GAAX,EAAgB;AAAEZ,IAAAA,MAAM,CAACc,cAAP,CAAsBF,GAAtB,EAA2BL,GAA3B,EAAgC;AAAEM,MAAAA,KAAK,EAAEA,KAAT;AAAgBE,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEL,IAAAA,GAAG,CAACL,GAAD,CAAH,GAAWM,KAAX;AAAmB;;AAAC,SAAOD,GAAP;AAAa;AAEjN;;;;;;;AAMA,OAAOM,SAAP,MAAsB,kBAAtB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,SAASC,uBAAT,CAAiCC,MAAjC,EAAyC;AACvCC,EAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,uBAAuBF,MAAvB,GAAgC,8CAAjC,EAAiF,IAAjF,EAAuF,iDAAiDA,MAAjD,GAA0D,KAAjJ,EAAwJ,uHAAuHA,MAA/Q,EAAuR,IAAvR,EAA6RG,IAA7R,CAAkS,IAAlS,CAAb;AACD;AAED;;;;;;;;;;AAQA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACE,UADtB;AAEA,MAAIC,SAAS,GAAGV,QAAQ,CAACW,KAAT,CAAeD,SAA/B;AACA,MAAIE,qBAAqB,GAAGZ,QAAQ,CAACa,WAArC;AAAA,MACIC,eAAe,GAAGF,qBAAqB,CAACE,eAD5C;AAAA,MAEIC,yBAAyB,GAAGH,qBAAqB,CAACG,yBAFtD;AAGA,MAAIC,qBAAqB,GAAGhB,QAAQ,CAACiB,WAArC;AAAA,MACIC,eAAe,GAAGF,qBAAqB,CAACE,eAD5C;AAAA,MAEIC,yBAAyB,GAAGH,qBAAqB,CAACG,yBAFtD;AAGA,MAAIC,eAAe,GAAGpB,QAAQ,CAACqB,KAA/B;AAAA,MACIC,SAAS,GAAGF,eAAe,CAACE,SADhC;AAAA,MAEIC,mBAAmB,GAAGH,eAAe,CAACG,mBAF1C;AAGA,MAAIC,eAAe,GAAGxB,QAAQ,CAACyB,KAA/B;AAAA,MACIC,SAAS,GAAGF,eAAe,CAACE,SADhC;AAAA,MAEIC,mBAAmB,GAAGH,eAAe,CAACG,mBAF1C;AAGA,MAAIC,gBAAgB,GAAG5B,QAAQ,CAAC6B,MAAhC;AAAA,MACIC,UAAU,GAAGF,gBAAgB,CAACE,UADlC;AAAA,MAEIC,oBAAoB,GAAGH,gBAAgB,CAACG,oBAF5C;AAGA,MAAIC,iBAAiB,GAAGhC,QAAQ,CAACiC,OAAjC;AAAA,MACIC,WAAW,GAAGF,iBAAiB,CAACE,WADpC;AAAA,MAEIC,qBAAqB,GAAGH,iBAAiB,CAACG,qBAF9C;AAGA,MAAIC,cAAc,GAAGpC,QAAQ,CAACqC,IAA9B;AAAA,MACIC,QAAQ,GAAGF,cAAc,CAACE,QAD9B;AAAA,MAEIC,kBAAkB,GAAGH,cAAc,CAACG,kBAFxC;AAGA,MAAIC,qBAAqB,GAAGxC,QAAQ,CAACyC,eAArC;AAAA,MACIC,mBAAmB,GAAGF,qBAAqB,CAACE,mBADhD;AAAA,MAEIC,6BAA6B,GAAGH,qBAAqB,CAACG,6BAF1D;AAGA,MAAIC,gBAAgB,GAAG5C,QAAQ,CAAC6C,MAAhC;AAAA,MACIC,UAAU,GAAGF,gBAAgB,CAACE,UADlC;AAAA,MAEIC,oBAAoB,GAAGH,gBAAgB,CAACG,oBAF5C;AAGA,MAAIC,qBAAqB,GAAGhD,QAAQ,CAACiD,aAArC;AAAA,MACIC,iBAAiB,GAAGF,qBAAqB,CAACE,iBAD9C;AAAA,MAEIC,2BAA2B,GAAGH,qBAAqB,CAACG,2BAFxD;AAGA,MAAIC,sBAAsB,GAAGpD,QAAQ,CAACqD,QAAT,CAAkBD,sBAA/C;AACA,MAAIE,mBAAmB,GAAGtD,QAAQ,CAACuD,eAAT,CAAyBD,mBAAnD;AACA,MAAIE,UAAU,GAAGxD,QAAQ,CAACyD,MAAT,CAAgBD,UAAjC;AACA,MAAIE,qBAAqB,GAAG1D,QAAQ,CAAC2D,WAArC;AAAA,MACIC,eAAe,GAAGF,qBAAqB,CAACE,eAD5C;AAAA,MAEIC,yBAAyB,GAAGH,qBAAqB,CAACG,yBAFtD;AAGA,MAAIC,sBAAsB,GAAG9D,QAAQ,CAAC+D,gBAAtC;AAAA,MACIC,oBAAoB,GAAGF,sBAAsB,CAACE,oBADlD;AAAA,MAEIC,8BAA8B,GAAGH,sBAAsB,CAACG,8BAF5D;AAIA;;;;;AAKA;;;;;;;;;;;;;;;;;;AAkBA,WAASC,WAAT,GAAuB;AACrB,WAAO1D,IAAI,CAAC2D,MAAL,CAAY,EAAZ,EAAgBC,IAAhB,CAAqB,UAAUC,QAAV,EAAoB,CAAE,CAA3C,EAA6CtE,YAA7C,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASuE,WAAT,GAAuB;AACrB,QAAIC,GAAG,GAAG,KAAKC,aAAL,EAAV;AACA,QAAIC,IAAI,GAAG5E,SAAS,CAAC0E,GAAD,CAApB;AACA,WAAOE,IAAI,CAACC,GAAZ;AACA,WAAOlE,IAAI,CAACmE,GAAL,CAAS,EAAT,EAAaF,IAAb,EAAmB;AACxBG,MAAAA,OAAO,EAAE;AACP,gCAAwBL,GAAG,CAACG,GAAJ,CAAQG;AADzB;AADe,KAAnB,EAIJT,IAJI,CAIC,UAAUC,QAAV,EAAoB;AAC1B,aAAO3D,SAAS,CAACF,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KANM,EAMJ1E,YANI,CAAP;AAOD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAAS+E,cAAT,CAAwBC,EAAxB,EAA4B;AAC1B,WAAOvE,IAAI,CAACwE,GAAL,CAAS,kBAAkBD,EAA3B,EAA+BX,IAA/B,CAAoC,UAAUC,QAAV,EAAoB;AAC7D,aAAOvD,eAAe,CAACN,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASkF,eAAT,GAA2B;AACzB,WAAOzE,IAAI,CAACwE,GAAL,CAAS,cAAT,EAAyBZ,IAAzB,CAA8B,UAAUC,QAAV,EAAoB;AACvD,aAAOtD,yBAAyB,CAACP,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhC;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASmF,iBAAT,GAA6B;AAC3B,QAAIT,IAAI,GAAG1F,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAEA,WAAOyB,IAAI,CAAC4E,IAAL,CAAU,cAAV,EAA0BX,IAA1B,EAAgCL,IAAhC,CAAqC,UAAUC,QAAV,EAAoB;AAC9D,aAAOvD,eAAe,CAACN,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASsF,uBAAT,CAAiCN,EAAjC,EAAqC;AACnC,QAAIN,IAAI,GAAG1F,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AACA,QAAIuG,mBAAmB,GAAGvG,SAAS,CAAC,CAAD,CAAnC;AAEA,WAAOyB,IAAI,CAACmE,GAAL,CAAS,kBAAkBI,EAA3B,EAA+BN,IAA/B,EAAqC;AAC1CG,MAAAA,OAAO,EAAEU,mBAAmB,GAAG;AAAE,2CAAmCA;AAArC,OAAH,GAAgE;AADlD,KAArC,EAEJlB,IAFI,CAEC,UAAUC,QAAV,EAAoB;AAC1B,aAAOvD,eAAe,CAACN,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAJM,EAIJ1E,YAJI,CAAP;AAKD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASwF,cAAT,CAAwBR,EAAxB,EAA4B;AAC1B9E,IAAAA,uBAAuB,CAAC,gBAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,mBAAmBD,EAA5B,EAAgCX,IAAhC,CAAqC,UAAUC,QAAV,EAAoB;AAC9D,aAAOnD,eAAe,CAACV,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASyF,gCAAT,CAA0CC,aAA1C,EAAyD;AACvDxF,IAAAA,uBAAuB,CAAC,kCAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,mBAAmBS,aAAnB,GAAmC,mBAA5C,EAAiErB,IAAjE,CAAsE,UAAUC,QAAV,EAAoB;AAC/F,aAAOf,mBAAmB,CAAC9C,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA1B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAAS2F,eAAT,GAA2B;AACzB,QAAIC,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,iBAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,eAAT,EAA0BlF,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAA7C,EAAiEvB,IAAjE,CAAsE,UAAUC,QAAV,EAAoB;AAC/F,aAAOlD,yBAAyB,CAACX,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhC;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,WAAS6F,iBAAT,CAA2BnB,IAA3B,EAAiC;AAC/BxE,IAAAA,uBAAuB,CAAC,mBAAD,CAAvB;AACA,WAAOO,IAAI,CAAC4E,IAAL,CAAU,eAAV,EAA2BX,IAA3B,EAAiCL,IAAjC,CAAsC,UAAUC,QAAV,EAAoB;AAC/D,aAAOnD,eAAe,CAACV,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,WAAS8F,uBAAT,CAAiCd,EAAjC,EAAqCN,IAArC,EAA2C;AACzCxE,IAAAA,uBAAuB,CAAC,yBAAD,CAAvB;AACA,WAAOO,IAAI,CAACmE,GAAL,CAAS,mBAAmBI,EAA5B,EAAgCN,IAAhC,EAAsCL,IAAtC,CAA2C,UAAUC,QAAV,EAAoB;AACpE,aAAOnD,eAAe,CAACV,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAS+F,QAAT,CAAkBf,EAAlB,EAAsB;AACpB,QAAIY,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,UAAD,CAAvB;AACA8F,IAAAA,eAAe,CAACJ,KAAD,CAAf;AACA,WAAOnF,IAAI,CAACwE,GAAL,CAAS,aAAaD,EAAtB,EAA0BjF,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAA7C,EAAiEvB,IAAjE,CAAsE,UAAUC,QAAV,EAAoB;AAC/F,aAAO/C,SAAS,CAACd,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASiG,UAAT,GAAsB;AACpB,QAAIL,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,YAAD,CAAvB;AACA8F,IAAAA,eAAe,CAACJ,KAAD,CAAf;AACA,WAAOnF,IAAI,CAACwE,GAAL,CAAS,SAAT,EAAoBlF,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAvC,EAA2DvB,IAA3D,CAAgE,UAAUC,QAAV,EAAoB;AACzF,aAAO9C,mBAAmB,CAACf,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA1B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,WAASkG,WAAT,CAAqBR,aAArB,EAAoChB,IAApC,EAA0C;AACxCxE,IAAAA,uBAAuB,CAAC,aAAD,CAAvB;AACA,WAAOO,IAAI,CAAC4E,IAAL,CAAU,SAAV,EAAqBX,IAArB,EAA2B;AAChCG,MAAAA,OAAO,EAAE;AACP,qCAA6Ba;AADtB;AADuB,KAA3B,EAIJrB,IAJI,CAIC,UAAUC,QAAV,EAAoB;AAC1B,aAAO/C,SAAS,CAACd,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KANM,EAMJ1E,YANI,CAAP;AAOD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,WAASmG,iBAAT,CAA2BT,aAA3B,EAA0CV,EAA1C,EAA8CN,IAA9C,EAAoD;AAClDxE,IAAAA,uBAAuB,CAAC,mBAAD,CAAvB;AACA,WAAOO,IAAI,CAACmE,GAAL,CAAS,aAAaI,EAAtB,EAA0BN,IAA1B,EAAgC;AACrCG,MAAAA,OAAO,EAAE;AACP,qCAA6Ba;AADtB;AAD4B,KAAhC,EAIJrB,IAJI,CAIC,UAAUC,QAAV,EAAoB;AAC1B,aAAO/C,SAAS,CAACd,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KANM,EAMJ1E,YANI,CAAP;AAOD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAASoG,QAAT,CAAkBpB,EAAlB,EAAsB;AACpB,QAAIY,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,UAAD,CAAvB;AACA8F,IAAAA,eAAe,CAACJ,KAAD,CAAf;AACA,WAAOnF,IAAI,CAACwE,GAAL,CAAS,YAAYD,EAArB,EAAyBjF,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAA5C,EAAgEvB,IAAhE,CAAqE,UAAUC,QAAV,EAAoB;AAC9F,aAAO3C,SAAS,CAAClB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASqG,SAAT,GAAqB;AACnB,QAAIT,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,WAAD,CAAvB;AACA8F,IAAAA,eAAe,CAACJ,KAAD,CAAf;AACA,WAAOnF,IAAI,CAACwE,GAAL,CAAS,QAAT,EAAmBlF,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAtC,EAA0DvB,IAA1D,CAA+D,UAAUC,QAAV,EAAoB;AACxF,aAAO1C,mBAAmB,CAACnB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA1B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,WAASsG,WAAT,CAAqB5B,IAArB,EAA2B;AACzB,WAAOjE,IAAI,CAAC4E,IAAL,CAAU,QAAV,EAAoBX,IAApB,EAA0BL,IAA1B,CAA+B,UAAUC,QAAV,EAAoB;AACxD,aAAO3C,SAAS,CAAClB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,WAASuG,iBAAT,CAA2BvB,EAA3B,EAA+BN,IAA/B,EAAqC;AACnCxE,IAAAA,uBAAuB,CAAC,mBAAD,CAAvB;AACA,WAAOO,IAAI,CAACmE,GAAL,CAAS,YAAYI,EAArB,EAAyBN,IAAzB,EAA+BL,IAA/B,CAAoC,UAAUC,QAAV,EAAoB;AAC7D,aAAO3C,SAAS,CAAClB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,WAASwG,oBAAT,CAA8B9B,IAA9B,EAAoC;AAClCxE,IAAAA,uBAAuB,CAAC,sBAAD,CAAvB;AACA,QAAIuG,IAAI,GAAG/B,IAAI,CAACgC,MAAL,CAAYD,IAAvB;AAEA,WAAOE,OAAO,CAACC,GAAR,CAAYhI,MAAM,CAACiI,IAAP,CAAYJ,IAAZ,EAAkBK,GAAlB,CAAsB,UAAUhF,MAAV,EAAkB;AACzD,UAAIiF,YAAY,GAAGN,IAAI,CAAC3E,MAAD,CAAvB;AAAA,UACIZ,WAAW,GAAG6F,YAAY,CAAC7F,WAD/B;AAAA,UAEI8F,QAAQ,GAAGD,YAAY,CAACC,QAF5B;AAIA,aAAOC,YAAY,CAACR,IAAI,CAAC3E,MAAD,CAAL,CAAZ,CAA2BuC,IAA3B,CAAgC,UAAUX,MAAV,EAAkB;AACvD,eAAOnE,eAAe,CAAC,EAAD,EAAKuC,MAAL,EAAa;AACjCZ,UAAAA,WAAW,EAAEA,WADoB;AAEjC8F,UAAAA,QAAQ,EAAEA,QAFuB;AAGjCE,UAAAA,UAAU,EAAE;AACVvC,YAAAA,GAAG,EAAE;AACHwC,cAAAA,IAAI,EAAE,MADH;AAEHC,cAAAA,QAAQ,EAAE,QAFP;AAGHpC,cAAAA,EAAE,EAAEtB,MAAM,CAACiB,GAAP,CAAWK;AAHZ;AADK;AAHqB,SAAb,CAAtB;AAWD,OAZM,CAAP;AAaD,KAlBkB,CAAZ,EAkBHX,IAlBG,CAkBE,UAAUgD,OAAV,EAAmB;AAC1B3C,MAAAA,IAAI,CAACgC,MAAL,CAAYD,IAAZ,GAAmBY,OAAO,CAACC,MAAR,CAAe,UAAUC,UAAV,EAAsB7D,MAAtB,EAA8B;AAC9D,eAAO/E,QAAQ,CAAC,EAAD,EAAK4I,UAAL,EAAiB7D,MAAjB,CAAf;AACD,OAFkB,EAEhB,EAFgB,CAAnB;AAGA,aAAO4C,WAAW,CAAC5B,IAAD,CAAlB;AACD,KAvBM,EAuBJ8C,KAvBI,CAuBExH,YAvBF,CAAP;AAwBD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASiH,YAAT,CAAsBvC,IAAtB,EAA4B;AAC1BxE,IAAAA,uBAAuB,CAAC,cAAD,CAAvB;AACA,QAAIuG,IAAI,GAAG/B,IAAI,CAAC+B,IAAhB;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,aAAOE,OAAO,CAACc,MAAR,CAAe,IAAIC,KAAJ,CAAU,oCAAV,CAAf,CAAP;AACD;;AACD,WAAOhH,UAAU,CAAC2E,IAAX,CAAgB,SAAhB,EAA2BoB,IAA3B,EAAiC;AACtC5B,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAD6B,KAAjC,EAIJR,IAJI,CAIC,UAAUsD,cAAV,EAA0B;AAChC,aAAOlE,UAAU,CAAC/C,UAAD,EAAaiH,cAAc,CAACjD,IAA5B,CAAjB;AACD,KANM,EAMJ8C,KANI,CAMExH,YANF,CAAP;AAOD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAAS4H,SAAT,CAAmB5C,EAAnB,EAAuB;AACrB9E,IAAAA,uBAAuB,CAAC,WAAD,CAAvB;AACA,WAAOQ,UAAU,CAACuE,GAAX,CAAe,aAAaD,EAA5B,EAAgCX,IAAhC,CAAqC,UAAUC,QAAV,EAAoB;AAC9D,aAAOb,UAAU,CAAChD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAjB;AACD,KAFM,EAEJ8C,KAFI,CAEExH,YAFF,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAAS6H,SAAT,CAAmB7C,EAAnB,EAAuB;AACrB9E,IAAAA,uBAAuB,CAAC,WAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,aAAaD,EAAtB,EAA0BX,IAA1B,CAA+B,UAAUC,QAAV,EAAoB;AACxD,aAAOvC,UAAU,CAACtB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAjB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAAS8H,UAAT,GAAsB;AACpB5H,IAAAA,uBAAuB,CAAC,YAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,SAAT,EAAoBZ,IAApB,CAAyB,UAAUC,QAAV,EAAoB;AAClD,aAAOtC,oBAAoB,CAACvB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA3B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,WAAS+H,YAAT,CAAsBrD,IAAtB,EAA4B;AAC1BxE,IAAAA,uBAAuB,CAAC,cAAD,CAAvB;AACA,WAAOO,IAAI,CAAC4E,IAAL,CAAU,SAAV,EAAqBX,IAArB,EAA2BL,IAA3B,CAAgC,UAAUC,QAAV,EAAoB;AACzD,aAAOvC,UAAU,CAACtB,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAjB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASgI,UAAT,CAAoBhD,EAApB,EAAwB;AACtB,WAAOvE,IAAI,CAACwE,GAAL,CAAS,yBAAyBD,EAAlC,EAAsCX,IAAtC,CAA2C,UAAUC,QAAV,EAAoB;AACpE,aAAOnC,WAAW,CAAC1B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAlB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASiI,WAAT,GAAuB;AACrB,WAAOxH,IAAI,CAACwE,GAAL,CAAS,qBAAT,EAAgCZ,IAAhC,CAAqC,UAAUC,QAAV,EAAoB;AAC9D,aAAOlC,qBAAqB,CAAC3B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA5B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAASkI,aAAT,CAAuBxD,IAAvB,EAA6B;AAC3B,WAAOjE,IAAI,CAAC4E,IAAL,CAAU,qBAAV,EAAiCX,IAAjC,EAAuCL,IAAvC,CAA4C,UAAUC,QAAV,EAAoB;AACrE,aAAOnC,WAAW,CAAC1B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAlB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,WAASmI,mBAAT,CAA6BnD,EAA7B,EAAiCN,IAAjC,EAAuC;AACrC,WAAOjE,IAAI,CAACmE,GAAL,CAAS,yBAAyBI,EAAlC,EAAsCN,IAAtC,EAA4CL,IAA5C,CAAiD,UAAUC,QAAV,EAAoB;AAC1E,aAAOnC,WAAW,CAAC1B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAlB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;AAaA,WAASoI,kBAAT,CAA4BpD,EAA5B,EAAgC;AAC9B,WAAOvE,IAAI,CAACwE,GAAL,CAAS,uBAAuBD,EAAhC,EAAoCX,IAApC,CAAyC,UAAUC,QAAV,EAAoB;AAClE,aAAO3B,mBAAmB,CAAClC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA1B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;AAaA,WAASqI,mBAAT,GAA+B;AAC7B,QAAIzC,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEA,WAAOyB,IAAI,CAACwE,GAAL,CAAS,mBAAT,EAA8BlF,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAjD,EAAqEvB,IAArE,CAA0E,UAAUC,QAAV,EAAoB;AACnG,aAAO1B,6BAA6B,CAACnC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAApC;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,WAASsI,qBAAT,CAA+B5D,IAA/B,EAAqC;AACnC,WAAOjE,IAAI,CAAC4E,IAAL,CAAU,mBAAV,EAA+BX,IAA/B,EAAqCL,IAArC,CAA0C,UAAUC,QAAV,EAAoB;AACnE,aAAO3B,mBAAmB,CAAClC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA1B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,WAASuI,2BAAT,CAAqCvD,EAArC,EAAyCN,IAAzC,EAA+C;AAC7C,WAAOjE,IAAI,CAACmE,GAAL,CAAS,uBAAuBI,EAAhC,EAAoCN,IAApC,EAA0CL,IAA1C,CAA+C,UAAUC,QAAV,EAAoB;AACxE,aAAO3B,mBAAmB,CAAClC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA1B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAASwI,OAAT,CAAiBxD,EAAjB,EAAqB;AACnB,WAAOvE,IAAI,CAACwE,GAAL,CAAS,WAAWD,EAApB,EAAwBX,IAAxB,CAA6B,UAAUC,QAAV,EAAoB;AACtD,aAAO/B,QAAQ,CAAC9B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAf;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASyI,QAAT,GAAoB;AAClB,WAAOhI,IAAI,CAACwE,GAAL,CAAS,OAAT,EAAkBZ,IAAlB,CAAuB,UAAUC,QAAV,EAAoB;AAChD,aAAO9B,kBAAkB,CAAC/B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAzB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,WAAS0I,UAAT,CAAoBhE,IAApB,EAA0B;AACxB,WAAOjE,IAAI,CAAC4E,IAAL,CAAU,OAAV,EAAmBX,IAAnB,EAAyBL,IAAzB,CAA8B,UAAUC,QAAV,EAAoB;AACvD,aAAO/B,QAAQ,CAAC9B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAf;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,WAAS2I,gBAAT,CAA0B3D,EAA1B,EAA8BN,IAA9B,EAAoC;AAClC,WAAOjE,IAAI,CAACmE,GAAL,CAAS,WAAWI,EAApB,EAAwBN,IAAxB,EAA8BL,IAA9B,CAAmC,UAAUC,QAAV,EAAoB;AAC5D,aAAO/B,QAAQ,CAAC9B,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAf;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAAS4I,SAAT,CAAmB5D,EAAnB,EAAuB;AACrB,WAAOvE,IAAI,CAACwE,GAAL,CAAS,cAAcD,EAAvB,EAA2BX,IAA3B,CAAgC,UAAUC,QAAV,EAAoB;AACzD,aAAOvB,UAAU,CAACtC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAjB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAAS6I,UAAT,GAAsB;AACpB,WAAOpI,IAAI,CAACwE,GAAL,CAAS,UAAT,EAAqBZ,IAArB,CAA0B,UAAUC,QAAV,EAAoB;AACnD,aAAOtB,oBAAoB,CAACvC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA3B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAAS8I,gBAAT,CAA0B9D,EAA1B,EAA8B;AAC5B,WAAOvE,IAAI,CAACwE,GAAL,CAAS,sBAAsBD,EAA/B,EAAmCX,IAAnC,CAAwC,UAAUC,QAAV,EAAoB;AACjE,aAAOnB,iBAAiB,CAAC1C,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAxB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAAS+I,iBAAT,GAA6B;AAC3B,WAAOtI,IAAI,CAACwE,GAAL,CAAS,kBAAT,EAA6BZ,IAA7B,CAAkC,UAAUC,QAAV,EAAoB;AAC3D,aAAOlB,2BAA2B,CAAC3C,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAlC;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,WAASgJ,YAAT,CAAsBtE,IAAtB,EAA4B;AAC1B,WAAOjE,IAAI,CAAC4E,IAAL,CAAU,UAAV,EAAsBX,IAAtB,EAA4BL,IAA5B,CAAiC,UAAUC,QAAV,EAAoB;AAC1D,aAAOvB,UAAU,CAACtC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAjB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,WAASiJ,kBAAT,CAA4BjE,EAA5B,EAAgCN,IAAhC,EAAsC;AACpC,WAAOjE,IAAI,CAACmE,GAAL,CAAS,cAAcI,EAAvB,EAA2BN,IAA3B,EAAiCL,IAAjC,CAAsC,UAAUC,QAAV,EAAoB;AAC/D,aAAOvB,UAAU,CAACtC,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAjB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASkJ,cAAT,CAAwBlE,EAAxB,EAA4B;AAC1B9E,IAAAA,uBAAuB,CAAC,gBAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,gBAAgBD,EAAzB,EAA6BX,IAA7B,CAAkC,UAAUC,QAAV,EAAoB;AAC3D,aAAOT,eAAe,CAACpD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASmJ,eAAT,GAA2B;AACzBjJ,IAAAA,uBAAuB,CAAC,iBAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,YAAT,EAAuBZ,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;AACrD,aAAOR,yBAAyB,CAACrD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAhC;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,WAASoJ,iBAAT,CAA2B1E,IAA3B,EAAiC;AAC/BxE,IAAAA,uBAAuB,CAAC,mBAAD,CAAvB;AACA,WAAOO,IAAI,CAAC4E,IAAL,CAAU,YAAV,EAAwBX,IAAxB,EAA8BL,IAA9B,CAAmC,UAAUC,QAAV,EAAoB;AAC5D,aAAOT,eAAe,CAACpD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,WAASqJ,uBAAT,CAAiCrE,EAAjC,EAAqCN,IAArC,EAA2C;AACzCxE,IAAAA,uBAAuB,CAAC,yBAAD,CAAvB;AACA,WAAOO,IAAI,CAACmE,GAAL,CAAS,gBAAgBI,EAAzB,EAA6BN,IAA7B,EAAmCL,IAAnC,CAAwC,UAAUC,QAAV,EAAoB;AACjE,aAAOT,eAAe,CAACpD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAAtB;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASsJ,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,QAAI3D,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,mBAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,aAAasE,OAAb,GAAuB,YAAhC,EAA8CxJ,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAjE,EAAqFvB,IAArF,CAA0F,UAAUC,QAAV,EAAoB;AACnH,aAAOjB,sBAAsB,CAAC5C,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA7B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASwJ,uBAAT,CAAiC9D,aAAjC,EAAgD;AAC9C,QAAIE,KAAK,GAAG5G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBoG,SAAzC,GAAqDpG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAEAkB,IAAAA,uBAAuB,CAAC,yBAAD,CAAvB;AACA,WAAOO,IAAI,CAACwE,GAAL,CAAS,mBAAmBS,aAAnB,GAAmC,YAA5C,EAA0D3F,mBAAmB,CAAC;AAAE6F,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAA7E,EAAiGvB,IAAjG,CAAsG,UAAUC,QAAV,EAAoB;AAC/H,aAAOjB,sBAAsB,CAAC5C,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA7B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASyJ,mBAAT,CAA6BzE,EAA7B,EAAiC;AAC/B,WAAOvE,IAAI,CAACwE,GAAL,CAAS,yBAAyBD,EAAlC,EAAsCX,IAAtC,CAA2C,UAAUC,QAAV,EAAoB;AACpE,aAAOL,oBAAoB,CAACxD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAA3B;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAAS0J,qBAAT,GAAiC;AAC/B,WAAOjJ,IAAI,CAACwE,GAAL,CAAS,qBAAT,EAAgCZ,IAAhC,CAAqC,UAAUC,QAAV,EAAoB;AAC9D,aAAOJ,8BAA8B,CAACzD,IAAD,EAAO6D,QAAQ,CAACI,IAAhB,CAArC;AACD,KAFM,EAEJ1E,YAFI,CAAP;AAGD;AAED;;;;;;;;AAMA,WAASgG,eAAT,CAAyBJ,KAAzB,EAAgC;AAC9B,QAAIA,KAAK,CAAC+D,MAAN,IAAgB,CAAC,OAAOC,IAAP,CAAYhE,KAAK,CAAC+D,MAAlB,CAArB,EAAgD;AAC9C/D,MAAAA,KAAK,CAAC+D,MAAN,IAAgB,MAAhB;AACD;AACF;;AAED,SAAO;AACLvF,IAAAA,MAAM,EAAED,WADH;AAEL0F,IAAAA,MAAM,EAAEtF,WAFH;AAGLQ,IAAAA,cAAc,EAAEA,cAHX;AAILG,IAAAA,eAAe,EAAEA,eAJZ;AAKLC,IAAAA,iBAAiB,EAAEA,iBALd;AAMLG,IAAAA,uBAAuB,EAAEA,uBANpB;AAOLE,IAAAA,cAAc,EAAEA,cAPX;AAQLG,IAAAA,eAAe,EAAEA,eARZ;AASLE,IAAAA,iBAAiB,EAAEA,iBATd;AAULC,IAAAA,uBAAuB,EAAEA,uBAVpB;AAWLL,IAAAA,gCAAgC,EAAEA,gCAX7B;AAYLM,IAAAA,QAAQ,EAAEA,QAZL;AAaLE,IAAAA,UAAU,EAAEA,UAbP;AAcLC,IAAAA,WAAW,EAAEA,WAdR;AAeLC,IAAAA,iBAAiB,EAAEA,iBAfd;AAgBLC,IAAAA,QAAQ,EAAEA,QAhBL;AAiBLC,IAAAA,SAAS,EAAEA,SAjBN;AAkBLC,IAAAA,WAAW,EAAEA,WAlBR;AAmBLC,IAAAA,iBAAiB,EAAEA,iBAnBd;AAoBLC,IAAAA,oBAAoB,EAAEA,oBApBjB;AAqBLoB,IAAAA,SAAS,EAAEA,SArBN;AAsBLX,IAAAA,YAAY,EAAEA,YAtBT;AAuBLY,IAAAA,SAAS,EAAEA,SAvBN;AAwBLC,IAAAA,UAAU,EAAEA,UAxBP;AAyBLC,IAAAA,YAAY,EAAEA,YAzBT;AA0BLC,IAAAA,UAAU,EAAEA,UA1BP;AA2BLC,IAAAA,WAAW,EAAEA,WA3BR;AA4BLC,IAAAA,aAAa,EAAEA,aA5BV;AA6BLC,IAAAA,mBAAmB,EAAEA,mBA7BhB;AA8BLK,IAAAA,OAAO,EAAEA,OA9BJ;AA+BLC,IAAAA,QAAQ,EAAEA,QA/BL;AAgCLC,IAAAA,UAAU,EAAEA,UAhCP;AAiCLC,IAAAA,gBAAgB,EAAEA,gBAjCb;AAkCLP,IAAAA,kBAAkB,EAAEA,kBAlCf;AAmCLC,IAAAA,mBAAmB,EAAEA,mBAnChB;AAoCLC,IAAAA,qBAAqB,EAAEA,qBApClB;AAqCLC,IAAAA,2BAA2B,EAAEA,2BArCxB;AAsCLK,IAAAA,SAAS,EAAEA,SAtCN;AAuCLC,IAAAA,UAAU,EAAEA,UAvCP;AAwCLE,IAAAA,iBAAiB,EAAEA,iBAxCd;AAyCLD,IAAAA,gBAAgB,EAAEA,gBAzCb;AA0CLE,IAAAA,YAAY,EAAEA,YA1CT;AA2CLC,IAAAA,kBAAkB,EAAEA,kBA3Cf;AA4CLC,IAAAA,cAAc,EAAEA,cA5CX;AA6CLC,IAAAA,eAAe,EAAEA,eA7CZ;AA8CLC,IAAAA,iBAAiB,EAAEA,iBA9Cd;AA+CLC,IAAAA,uBAAuB,EAAEA,uBA/CpB;AAgDLC,IAAAA,iBAAiB,EAAEA,iBAhDd;AAiDLE,IAAAA,uBAAuB,EAAEA,uBAjDpB;AAkDLC,IAAAA,mBAAmB,EAAEA,mBAlDhB;AAmDLC,IAAAA,qBAAqB,EAAEA;AAnDlB,GAAP;AAqDD","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Contentful Space API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n * @namespace ContentfulSpaceAPI\n */\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n\n/**\n * @memberof ContentfulSpaceAPI\n * @typedef {object} ContentfulSpaceAPI\n * @prop {function} delete\n * @prop {function} update\n * @prop {function} getEnvironment\n * @prop {function} getEnvironments\n * @prop {function} createEnvironment\n * @prop {function} createEnvironmentWithId\n * @prop {function} getContentType\n * @prop {function} getContentTypes\n * @prop {function} createContentType\n * @prop {function} createContentTypeWithId\n * @prop {function} getEntry\n * @prop {function} getEntries\n * @prop {function} createEntry\n * @prop {function} createEntryWithId\n * @prop {function} getAsset\n * @prop {function} getAssets\n * @prop {function} createAsset\n * @prop {function} createAssetWithId\n * @prop {function} getLocale\n * @prop {function} getLocales\n * @prop {function} createLocale\n * @prop {function} getWebhook\n * @prop {function} getWebhooks\n * @prop {function} createWebhook\n * @prop {function} createWebhookWithId\n * @prop {function} getRole\n * @prop {function} getRoles\n * @prop {function} createRole\n * @prop {function} createRoleWithId\n * @prop {function} getSpaceMembership\n * @prop {function} getSpaceMemberships\n * @prop {function} createSpaceMembership\n * @prop {function} createSpaceMembershipWithId\n * @prop {function} getApiKey\n * @prop {function} getApiKeys\n * @prop {function} createApiKey\n * @prop {function} createApiKeyWithId\n * @prop {function} getUiExtension\n * @prop {function} getUiExtensions\n * @prop {function} createUiExtension\n * @prop {function} createUiExtensionWithId\n * @prop {function} getEntrySnapshots\n * @prop {function} getContentTypeSnapshots\n * @prop {function} getEnvironmentAliases\n * @prop {function} getEnvironmentAlias\n */\n\nfunction raiseDeprecationWarning(method) {\n  console.warn(['Deprecated: Space.' + method + '() will be removed in future major versions.', null, 'Please migrate your code to use Environment.' + method + '():', 'https://contentful.github.io/contentful-management.js/contentful-management/latest/ContentfulEnvironmentAPI.html#.' + method, null].join('\\n'));\n}\n\n/**\n * Creates API object with methods to access the Space API\n * @private\n * @param {object} params - API initialization params\n * @prop {object} http - HTTP client instance\n * @prop {object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulSpaceAPI}\n */\nexport default function createSpaceApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapSpace = entities.space.wrapSpace;\n  var _entities$environment = entities.environment,\n      wrapEnvironment = _entities$environment.wrapEnvironment,\n      wrapEnvironmentCollection = _entities$environment.wrapEnvironmentCollection;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var _entities$webhook = entities.webhook,\n      wrapWebhook = _entities$webhook.wrapWebhook,\n      wrapWebhookCollection = _entities$webhook.wrapWebhookCollection;\n  var _entities$role = entities.role,\n      wrapRole = _entities$role.wrapRole,\n      wrapRoleCollection = _entities$role.wrapRoleCollection;\n  var _entities$spaceMember = entities.spaceMembership,\n      wrapSpaceMembership = _entities$spaceMember.wrapSpaceMembership,\n      wrapSpaceMembershipCollection = _entities$spaceMember.wrapSpaceMembershipCollection;\n  var _entities$apiKey = entities.apiKey,\n      wrapApiKey = _entities$apiKey.wrapApiKey,\n      wrapApiKeyCollection = _entities$apiKey.wrapApiKeyCollection;\n  var _entities$previewApiK = entities.previewApiKey,\n      wrapPreviewApiKey = _entities$previewApiK.wrapPreviewApiKey,\n      wrapPreviewApiKeyCollection = _entities$previewApiK.wrapPreviewApiKeyCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  var _entities$environment2 = entities.environmentAlias,\n      wrapEnvironmentAlias = _entities$environment2.wrapEnvironmentAlias,\n      wrapEnvironmentAliasCollection = _entities$environment2.wrapEnvironmentAliasCollection;\n\n  /**\n   * Space instances.\n   * @namespace Space\n   */\n\n  /**\n   * Deletes the space\n   * @memberof Space\n   * @func delete\n   * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.delete())\n   * .then(() => console.log('Space deleted.'))\n   * .catch(console.error)\n  */\n\n  function deleteSpace() {\n    return http.delete('').then(function (response) {}, errorHandler);\n  }\n\n  /**\n   * Updates the space\n   * @memberof Space\n   * @func update\n   * @return {Promise<Space.Space>} Promise for the updated space.\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => {\n   *   space.name = 'New name'\n   *   return space.update()\n   * })\n   * .then((space) => console.log(`Space ${space.sys.id} renamed.`)\n   * .catch(console.error)\n  */\n  function updateSpace() {\n    var raw = this.toPlainObject();\n    var data = cloneDeep(raw);\n    delete data.sys;\n    return http.put('', data, {\n      headers: {\n        'X-Contentful-Version': raw.sys.version\n      }\n    }).then(function (response) {\n      return wrapSpace(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an environment\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Environment ID\n   * @return {Promise<Environment.Environment>} Promise for an Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironment('<environement_id>'))\n   * .then((environment) => console.log(environment))\n   * .catch(console.error)\n   */\n  function getEnvironment(id) {\n    return http.get('environments/' + id).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Environments\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Environment.EnvironmentCollection>} Promise for a collection of Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironments())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getEnvironments() {\n    return http.get('environments').then(function (response) {\n      return wrapEnvironmentCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates an Environement\n   * @memberof ContentfulSpaceAPI\n   * @see {Environment}\n   * @param {object=} data - Object representation of the Environment to be created\n   * @return {Promise<Environment.Environment>} Promise for the newly created Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEnvironment({ name: 'Staging' }))\n   * .then((environment) => console.log(environment))\n   * .catch(console.error)\n   */\n  function createEnvironment() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    return http.post('environments', data).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates an Environment with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {Environment}\n   * @param {string} id - Environment ID\n   * @param {object=} data - Object representation of the Environment to be created\n   * @param {string=} sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is \"master\"\n   * @return {Promise<Environment.Environment>} Promise for the newly created Environment\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))\n   * .then((environment) => console.log(environment))\n   * .catch(console.error)\n   */\n  function createEnvironmentWithId(id) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var sourceEnvironmentId = arguments[2];\n\n    return http.put('environments/' + id, data, {\n      headers: sourceEnvironmentId ? { 'X-Contentful-Source-Environment': sourceEnvironmentId } : {}\n    }).then(function (response) {\n      return wrapEnvironment(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a Content Type\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Content Type ID\n   * @return {Promise<ContentType.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getContentType('<content_type_id>'))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n  function getContentType(id) {\n    raiseDeprecationWarning('getContentType');\n    return http.get('content_types/' + id).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an EditorInterface for a ContentType\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} contentTypeId - Content Type ID\n   * @return {Promise<EditorInterface.EditorInterface>} Promise for an EditorInterface\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEditorInterfaceForContentType('<content_type_id>'))\n   * .then((EditorInterface) => console.log(EditorInterface))\n   * .catch(console.error)\n   */\n  function getEditorInterfaceForContentType(contentTypeId) {\n    raiseDeprecationWarning('getEditorInterfaceForContentType');\n    return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n      return wrapEditorInterface(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Content Types\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<ContentType.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getContentTypes())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getContentTypes() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    raiseDeprecationWarning('getContentTypes');\n    return http.get('content_types', createRequestConfig({ query: query })).then(function (response) {\n      return wrapContentTypeCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Content Type\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {ContentType}\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createContentType({\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n  function createContentType(data) {\n    raiseDeprecationWarning('createContentType');\n    return http.post('content_types', data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Content Type with a custom ID\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {ContentType.ContentType}\n   * @param {string} id - Content Type ID\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createContentTypeWithId('<content-type-id>', {\n   *   name: 'Blog Post',\n   *   fields: [\n   *     {\n   *       id: 'title',\n   *       name: 'Title',\n   *       required: true,\n   *       localized: false,\n   *       type: 'Text'\n   *     }\n   *   ]\n   * }))\n   * .then((contentType) => console.log(contentType))\n   * .catch(console.error)\n   */\n  function createContentTypeWithId(id, data) {\n    raiseDeprecationWarning('createContentTypeWithId');\n    return http.put('content_types/' + id, data).then(function (response) {\n      return wrapContentType(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an Entry\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Entry ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entry.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEntry('<entry-id>'))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n  function getEntry(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    raiseDeprecationWarning('getEntry');\n    normalizeSelect(query);\n    return http.get('entries/' + id, createRequestConfig({ query: query })).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Entries\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entry.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getEntries() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    raiseDeprecationWarning('getEntries');\n    normalizeSelect(query);\n    return http.get('entries', createRequestConfig({ query: query })).then(function (response) {\n      return wrapEntryCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Entry\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type which this Entry is based on\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEntry('<content_type_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n  function createEntry(contentTypeId, data) {\n    raiseDeprecationWarning('createEntry');\n    return http.post('entries', data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Entry with a custom ID\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type which this Entry is based on\n   * @param {string} id - Entry ID\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create entry\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createEntryWithId('<content_type_id>', '<entry_id>', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Entry title'\n   *     }\n   *   }\n   * }))\n   * .then((entry) => console.log(entry))\n   * .catch(console.error)\n   */\n  function createEntryWithId(contentTypeId, id, data) {\n    raiseDeprecationWarning('createEntryWithId');\n    return http.put('entries/' + id, data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    }).then(function (response) {\n      return wrapEntry(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an Asset\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Asset ID\n   * @param {object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Asset.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getAsset('<asset_id>'))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n  */\n  function getAsset(id) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    raiseDeprecationWarning('getAsset');\n    normalizeSelect(query);\n    return http.get('assets/' + id, createRequestConfig({ query: query })).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Assets\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Asset.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getAssets())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getAssets() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    raiseDeprecationWarning('getAssets');\n    normalizeSelect(query);\n    return http.get('assets', createRequestConfig({ query: query })).then(function (response) {\n      return wrapAssetCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createAsset({\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Playsam Streamliner'\n   *    },\n   *    file: {\n   *       'en-US': {\n   *         contentType: 'image/jpeg',\n   *        fileName: 'example.jpeg',\n   *        upload: 'https://example.com/example.jpg'\n   *      }\n   *    }\n   *   }\n   * }))\n   * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {string} id - Asset ID\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create asset\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createAssetWithId('<asset_id>', {\n   *   title: {\n   *     'en-US': 'Playsam Streamliner'\n   *   },\n   *   file: {\n   *     'en-US': {\n   *       contentType: 'image/jpeg',\n   *       fileName: 'example.jpeg',\n   *       upload: 'https://example.com/example.jpg'\n   *     }\n   *   }\n   * }))\n   * .then((asset) => asset.process())\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n  function createAssetWithId(id, data) {\n    raiseDeprecationWarning('createAssetWithId');\n    return http.put('assets/' + id, data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @param {object} data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createAssetFromFiles({\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          file: createReadStream('path/to/filename_english.jpg')\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/svg+xml',\n   *          fileName: 'filename_german.svg',\n   *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n   *       }\n   *     }\n   *   }\n   * }))\n   * .then((asset) => console.log(asset))\n   * .catch(console.error)\n   */\n  function createAssetFromFiles(data) {\n    raiseDeprecationWarning('createAssetFromFiles');\n    var file = data.fields.file;\n\n    return Promise.all(Object.keys(file).map(function (locale) {\n      var _file$locale = file[locale],\n          contentType = _file$locale.contentType,\n          fileName = _file$locale.fileName;\n\n      return createUpload(file[locale]).then(function (upload) {\n        return _defineProperty({}, locale, {\n          contentType: contentType,\n          fileName: fileName,\n          uploadFrom: {\n            sys: {\n              type: 'Link',\n              linkType: 'Upload',\n              id: upload.sys.id\n            }\n          }\n        });\n      });\n    })).then(function (uploads) {\n      data.fields.file = uploads.reduce(function (fieldsData, upload) {\n        return _extends({}, fieldsData, upload);\n      }, {});\n      return createAsset(data);\n    }).catch(errorHandler);\n  }\n\n  /**\n   * Creates a Upload.\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {object} data - Object with file information.\n   * @param {object} data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Upload>} Upload object containing information about the uploaded file.\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createUpload({file: uploadStream, 'image/png'})\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n  function createUpload(data) {\n    raiseDeprecationWarning('createUpload');\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    }).catch(errorHandler);\n  }\n\n  /**\n   * Gets an Upload\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Upload ID\n   * @return {Promise<Upload>} Promise for an Upload\n   * @example\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getUpload('<upload-id>')\n   * .then((upload) => console.log(upload))\n   * .catch(console.error)\n   */\n  function getUpload(id) {\n    raiseDeprecationWarning('getUpload');\n    return httpUpload.get('uploads/' + id).then(function (response) {\n      return wrapUpload(http, response.data);\n    }).catch(errorHandler);\n  }\n\n  /**\n   * Gets a Locale\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Locale ID\n   * @return {Promise<Locale.Locale>} Promise for an Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getLocale('<locale_id>'))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n  */\n  function getLocale(id) {\n    raiseDeprecationWarning('getLocale');\n    return http.get('locales/' + id).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Locales\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Locale.LocaleCollection>} Promise for a collection of Locales\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getLocales())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n  */\n  function getLocales() {\n    raiseDeprecationWarning('getLocales');\n    return http.get('locales').then(function (response) {\n      return wrapLocaleCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Locale\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {Locale.Locale}\n   * @param {object} data - Object representation of the Locale to be created\n   * @return {Promise<Locale.Locale>} Promise for the newly created Locale\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * // Create locale\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createLocale({\n   *   name: 'German (Austria)',\n   *   code: 'de-AT',\n   *   fallbackCode: 'de-DE',\n   *   optional: true\n   * }))\n   * .then((locale) => console.log(locale))\n   * .catch(console.error)\n   */\n  function createLocale(data) {\n    raiseDeprecationWarning('createLocale');\n    return http.post('locales', data).then(function (response) {\n      return wrapLocale(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a Webhook\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Webhook ID\n   * @return {Promise<Webhook.Webhook>} Promise for a Webhook\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getWebhook('<webhook_id>'))\n   * .then((webhook) => console.log(webhook))\n   * .catch(console.error)\n  */\n  function getWebhook(id) {\n    return http.get('webhook_definitions/' + id).then(function (response) {\n      return wrapWebhook(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Webhooks\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Webhook.WebhookCollection>} Promise for a collection of Webhooks\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getWebhooks())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getWebhooks() {\n    return http.get('webhook_definitions').then(function (response) {\n      return wrapWebhookCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Webhook\n   * @memberof ContentfulSpaceAPI\n   * @see {Webhook.Webhook}\n   * @param {object} data - Object representation of the Webhook to be created\n   * @return {Promise<Webhook.Webhook>} Promise for the newly created Webhook\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createWebhook({\n   *   'name': 'My webhook',\n   *   'url': 'https://www.example.com/test',\n   *   'topics': [\n   *     'Entry.create',\n   *     'ContentType.create',\n   *     '*.publish',\n   *     'Asset.*'\n   *   ]\n   * }))\n   * .then((webhook) => console.log(webhook))\n   * .catch(console.error)\n   */\n  function createWebhook(data) {\n    return http.post('webhook_definitions', data).then(function (response) {\n      return wrapWebhook(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Webhook with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {Webhook.Webhook}\n   * @param {string} id - Webhook ID\n   * @param {object} data - Object representation of the Webhook to be created\n   * @return {Promise<Webhook.Webhook>} Promise for the newly created Webhook\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createWebhookWithId('<webhook_id>', {\n   *   'name': 'My webhook',\n   *   'url': 'https://www.example.com/test',\n   *   'topics': [\n   *     'Entry.create',\n   *     'ContentType.create',\n   *     '*.publish',\n   *     'Asset.*'\n   *   ]\n   * }))\n   * .then((webhook) => console.log(webhook))\n   * .catch(console.error)\n   */\n  function createWebhookWithId(id, data) {\n    return http.put('webhook_definitions/' + id, data).then(function (response) {\n      return wrapWebhook(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a Space Membership\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Space Membership ID\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for a Space Membership\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getSpaceMembership('id'))\n   * .then((spaceMembership) => console.log(spaceMembership))\n   * .catch(console.error)\n   */\n  function getSpaceMembership(id) {\n    return http.get('space_memberships/' + id).then(function (response) {\n      return wrapSpaceMembership(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Space Memberships\n   * @memberof ContentfulSpaceAPI\n   * @param {object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<SpaceMembership.SpaceMembershipCollection>} Promise for a collection of Space Memberships\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getSpaceMemberships() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    return http.get('space_memberships', createRequestConfig({ query: query })).then(function (response) {\n      return wrapSpaceMembershipCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Space Membership\n   * @memberof ContentfulSpaceAPI\n   * @see {SpaceMembership.SpaceMembership}\n   * @param {object} data - Object representation of the Space Membership to be created\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for the newly created Space Membership\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createSpaceMembership({\n   *   admin: false,\n   *   roles: [\n   *     {\n   *       type: 'Link',\n   *       linkType: 'Role',\n   *       id: '<role_id>'\n   *     }\n   *   ],\n   *   email: 'foo@example.com'\n   * }))\n   * .then((spaceMembership) => console.log(spaceMembership))\n   * .catch(console.error)\n   */\n  function createSpaceMembership(data) {\n    return http.post('space_memberships', data).then(function (response) {\n      return wrapSpaceMembership(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Space Membership with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {SpaceMembership.SpaceMembership}\n   * @param {string} id - Space Membership ID\n   * @param {object} data - Object representation of the Space Membership to be created\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for the newly created Space Membership\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {\n   *   admin: false,\n   *   roles: [\n   *     {\n   *       type: 'Link',\n   *       linkType: 'Role',\n   *       id: '<role_id>'\n   *     }\n   *   ],\n   *   email: 'foo@example.com'\n   * }))\n   * .then((spaceMembership) => console.log(spaceMembership))\n   * .catch(console.error)\n   */\n  function createSpaceMembershipWithId(id, data) {\n    return http.put('space_memberships/' + id, data).then(function (response) {\n      return wrapSpaceMembership(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a Role\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Role ID\n   * @return {Promise<Role.Role>} Promise for a Role\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createRole({\n   *   fields: {\n   *     title: {\n   *       'en-US': 'Role title'\n   *     }\n   *   }\n   * }))\n   * .then((role) => console.log(role))\n   * .catch(console.error)\n  */\n  function getRole(id) {\n    return http.get('roles/' + id).then(function (response) {\n      return wrapRole(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Roles\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Role.RoleCollection>} Promise for a collection of Roles\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getRoles())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getRoles() {\n    return http.get('roles').then(function (response) {\n      return wrapRoleCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Role\n   * @memberof ContentfulSpaceAPI\n   * @see {Role.Role}\n   * @param {object} data - Object representation of the Role to be created\n   * @return {Promise<Role.Role>} Promise for the newly created Role\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createRole({\n   *   name: 'My Role',\n   *   description: 'foobar role',\n   *   permissions: {\n   *     ContentDelivery: 'all',\n   *     ContentModel: ['read'],\n   *     Settings: []\n   *   },\n   *   policies: [\n   *     {\n   *       effect: 'allow',\n   *       actions: 'all',\n   *       constraint: {\n   *         and: [\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Entry'\n   *             ]\n   *           },\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Asset'\n   *             ]\n   *           }\n   *         ]\n   *       }\n   *     }\n   *   ]\n   * }))\n   * .then((role) => console.log(role))\n   * .catch(console.error)\n   */\n  function createRole(data) {\n    return http.post('roles', data).then(function (response) {\n      return wrapRole(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Role with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {Role.Role}\n   * @param {string} id - Role ID\n   * @param {object} data - Object representation of the Role to be created\n   * @return {Promise<Role.Role>} Promise for the newly created Role\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createRoleWithId('<role-id>', {\n   *   name: 'My Role',\n   *   description: 'foobar role',\n   *   permissions: {\n   *     ContentDelivery: 'all',\n   *     ContentModel: ['read'],\n   *     Settings: []\n   *   },\n   *   policies: [\n   *     {\n   *       effect: 'allow',\n   *       actions: 'all',\n   *       constraint: {\n   *         and: [\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Entry'\n   *             ]\n   *           },\n   *           {\n   *             equals: [\n   *               { doc: 'sys.type' },\n   *               'Asset'\n   *             ]\n   *           }\n   *         ]\n   *       }\n   *     }\n   *   ]\n   * }))\n   * .then((role) => console.log(role))\n   * .catch(console.error)\n   */\n  function createRoleWithId(id, data) {\n    return http.put('roles/' + id, data).then(function (response) {\n      return wrapRole(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a Api Key\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - API Key ID\n   * @return {Promise<ApiKey.ApiKey>} Promise for a Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getApiKey('<apikey-id>'))\n   * .then((apikey) => console.log(apikey))\n   * .catch(console.error)\n   */\n  function getApiKey(id) {\n    return http.get('api_keys/' + id).then(function (response) {\n      return wrapApiKey(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Api Keys\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<ApiKey.ApiKeyCollection>} Promise for a collection of Api Keys\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getApiKeys())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getApiKeys() {\n    return http.get('api_keys').then(function (response) {\n      return wrapApiKeyCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a preview Api Key\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Preview API Key ID\n   * @return {Promise<PreviewApiKey.PreviewApiKey>} Promise for a Preview Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))\n   * .then((previewApikey) => console.log(previewApikey))\n   * .catch(console.error)\n   */\n  function getPreviewApiKey(id) {\n    return http.get('preview_api_keys/' + id).then(function (response) {\n      return wrapPreviewApiKey(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of preview Api Keys\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<PreviewApiKey.PreviewApiKeyCollection>} Promise for a collection of Preview Api Keys\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getPreviewApiKeys())\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getPreviewApiKeys() {\n    return http.get('preview_api_keys').then(function (response) {\n      return wrapPreviewApiKeyCollection(http, response.data);\n    }, errorHandler);\n  }\n  /**\n   * Creates a Api Key\n   * @memberof ContentfulSpaceAPI\n   * @see {ApiKey.ApiKey}\n   * @param {object} data - Object representation of the Api Key to be created\n   * @return {Promise<ApiKey.ApiKey>} Promise for the newly created Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createApiKey({\n   *   name: 'API Key name',\n   *   environments:[\n   *    {\n   *     sys: {\n   *      type: 'Link'\n   *      linkType: 'Environment',\n   *      id:'<environment_id>'\n   *     }\n   *    }\n   *   ]\n   *   }\n   * }))\n   * .then((apiKey) => console.log(apiKey))\n   * .catch(console.error)\n  */\n  function createApiKey(data) {\n    return http.post('api_keys', data).then(function (response) {\n      return wrapApiKey(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a Api Key with a custom ID\n   * @memberof ContentfulSpaceAPI\n   * @see {ApiKey.ApiKey}\n   * @param {string} id - Api Key ID\n   * @param {object} data - Object representation of the Api Key to be created\n   * @return {Promise<ApiKey.ApiKey>} Promise for the newly created Api Key\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createApiKeyWithId('<api-key-id>', {\n   *   name: 'API Key name'\n   *   environments:[\n   *    {\n   *     sys: {\n   *      type: 'Link'\n   *      linkType: 'Environment',\n   *      id:'<environment_id>'\n   *     }\n   *    }\n   *   ]\n   *   }\n   * }))\n   * .then((apiKey) => console.log(apiKey))\n   * .catch(console.error)\n   */\n  function createApiKeyWithId(id, data) {\n    return http.put('api_keys/' + id, data).then(function (response) {\n      return wrapApiKey(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an UI Extension\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - UI Extension ID\n   * @return {Promise<UiExtension.UiExtension>} Promise for an UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getUiExtension('<extension-id>'))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n  function getUiExtension(id) {\n    raiseDeprecationWarning('getUiExtension');\n    return http.get('extensions/' + id).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of UI Extension\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<UiExtension.UiExtensionCollection>} Promise for a collection of UI Extensions\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getUiExtensions()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getUiExtensions() {\n    raiseDeprecationWarning('getUiExtensions');\n    return http.get('extensions').then(function (response) {\n      return wrapUiExtensionCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a UI Extension\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {UiExtension.UiExtension}\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createUiExtension({\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n  function createUiExtension(data) {\n    raiseDeprecationWarning('createUiExtension');\n    return http.post('extensions', data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Creates a UI Extension with a custom ID\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @see {UiExtension.UiExtension}\n   * @param {string} id - UI Extension ID\n   * @param {object} data - Object representation of the UI Extension to be created\n   * @return {Promise<UiExtension.UiExtension>} Promise for the newly created UI Extension\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.createUiExtensionWithId('<extension_id>', {\n   *   extension: {\n   *     name: 'My awesome extension',\n   *     src: 'https://example.com/my',\n   *     fieldTypes: [\n   *       {\n   *         type: 'Symbol'\n   *       },\n   *       {\n   *         type: 'Text'\n   *       }\n   *     ],\n   *     sidebar: false\n   *   }\n   * }))\n   * .then((uiExtension) => console.log(uiExtension))\n   * .catch(console.error)\n   */\n  function createUiExtensionWithId(id, data) {\n    raiseDeprecationWarning('createUiExtensionWithId');\n    return http.put('extensions/' + id, data).then(function (response) {\n      return wrapUiExtension(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets all snapshots of an entry\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @func getEntrySnapshots\n   * @param {string} entryId - Entry ID\n   * @param {object=} query - additional query paramaters\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Entry Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEntrySnapshots('<entry_id>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n  function getEntrySnapshots(entryId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    raiseDeprecationWarning('getEntrySnapshots');\n    return http.get('entries/' + entryId + '/snapshots', createRequestConfig({ query: query })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets all snapshots of a contentType\n   * @deprecated since version 5.0\n   * @memberof ContentfulSpaceAPI\n   * @func getContentTypeSnapshots\n   * @param {string} contentTypeId - Content Type ID\n   * @param {object=} query - additional query paramaters\n   * @return {Promise<Snapshot.SnapshotCollection>} Promise for a collection of Content Type Snapshots\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getContentTypeSnapshots('<contentTypeId>'))\n   * .then((snapshots) => console.log(snapshots.items))\n   * .catch(console.error)\n   */\n  function getContentTypeSnapshots(contentTypeId) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    raiseDeprecationWarning('getContentTypeSnapshots');\n    return http.get('content_types/' + contentTypeId + '/snapshots', createRequestConfig({ query: query })).then(function (response) {\n      return wrapSnapshotCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets an Environment Alias\n   * @memberof ContentfulSpaceAPI\n   * @param {string} id - Environment Alias ID\n   * @return {Promise<EnvironmentAlias.EnvironmentAlias>} Promise for an Environment Alias\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironmentAlias('<alias-id>'))\n   * .then((alias) => console.log(alias))\n   * .catch(console.error)\n   */\n  function getEnvironmentAlias(id) {\n    return http.get('environment_aliases/' + id).then(function (response) {\n      return wrapEnvironmentAlias(http, response.data);\n    }, errorHandler);\n  }\n\n  /**\n   * Gets a collection of Environment Aliases\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<EnvironmentAlias.EnvironmentAliasCollection>} Promise for a collection of Environment Aliases\n   * @example\n   * const contentful = require('contentful-management')\n   *\n   * const client = contentful.createClient({\n   *   accessToken: '<content_management_api_key>'\n   * })\n   *\n   * client.getSpace('<space_id>')\n   * .then((space) => space.getEnvironmentAliases()\n   * .then((response) => console.log(response.items))\n   * .catch(console.error)\n   */\n  function getEnvironmentAliases() {\n    return http.get('environment_aliases').then(function (response) {\n      return wrapEnvironmentAliasCollection(http, response.data);\n    }, errorHandler);\n  }\n\n  /*\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   *\n   */\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    delete: deleteSpace,\n    update: updateSpace,\n    getEnvironment: getEnvironment,\n    getEnvironments: getEnvironments,\n    createEnvironment: createEnvironment,\n    createEnvironmentWithId: createEnvironmentWithId,\n    getContentType: getContentType,\n    getContentTypes: getContentTypes,\n    createContentType: createContentType,\n    createContentTypeWithId: createContentTypeWithId,\n    getEditorInterfaceForContentType: getEditorInterfaceForContentType,\n    getEntry: getEntry,\n    getEntries: getEntries,\n    createEntry: createEntry,\n    createEntryWithId: createEntryWithId,\n    getAsset: getAsset,\n    getAssets: getAssets,\n    createAsset: createAsset,\n    createAssetWithId: createAssetWithId,\n    createAssetFromFiles: createAssetFromFiles,\n    getUpload: getUpload,\n    createUpload: createUpload,\n    getLocale: getLocale,\n    getLocales: getLocales,\n    createLocale: createLocale,\n    getWebhook: getWebhook,\n    getWebhooks: getWebhooks,\n    createWebhook: createWebhook,\n    createWebhookWithId: createWebhookWithId,\n    getRole: getRole,\n    getRoles: getRoles,\n    createRole: createRole,\n    createRoleWithId: createRoleWithId,\n    getSpaceMembership: getSpaceMembership,\n    getSpaceMemberships: getSpaceMemberships,\n    createSpaceMembership: createSpaceMembership,\n    createSpaceMembershipWithId: createSpaceMembershipWithId,\n    getApiKey: getApiKey,\n    getApiKeys: getApiKeys,\n    getPreviewApiKeys: getPreviewApiKeys,\n    getPreviewApiKey: getPreviewApiKey,\n    createApiKey: createApiKey,\n    createApiKeyWithId: createApiKeyWithId,\n    getUiExtension: getUiExtension,\n    getUiExtensions: getUiExtensions,\n    createUiExtension: createUiExtension,\n    createUiExtensionWithId: createUiExtensionWithId,\n    getEntrySnapshots: getEntrySnapshots,\n    getContentTypeSnapshots: getContentTypeSnapshots,\n    getEnvironmentAlias: getEnvironmentAlias,\n    getEnvironmentAliases: getEnvironmentAliases\n  };\n}"]},"metadata":{},"sourceType":"module"}