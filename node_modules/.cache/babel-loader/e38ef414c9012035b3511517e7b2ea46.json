{"ast":null,"code":"/**\n * Upload instances\n * @namespace Upload\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createDeleteEntity } from '../instance-actions';\n/**\n * @memberof Upload\n * @typedef {Upload} Upload\n * @prop {Object} sys - Standard system metadata with additional asset specific properties\n * @prop {string} sys.id - The id of the upload\n * @prop {function(): Promise} delete - Deletes an upload\n * @prop {function(): Object} toPlainObject - Returns this Asset as a plain JS object\n */\n\nfunction createUploadApi(http) {\n  return {\n    /**\n     * Deletes this object on the server.\n     * @memberof Upload\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUpload('<upload_id>'))\n     * .then((upload) => upload.delete())\n     * .then((upload) => console.log(`upload ${upload.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'uploads'\n    })\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw upload data\n * @return {Upload} Wrapped upload data\n */\n\n\nexport function wrapUpload(http, data) {\n  var upload = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(upload, createUploadApi(http));\n  return freezeSys(upload);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/upload.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createDeleteEntity","createUploadApi","http","delete","entityPath","wrapUpload","data","upload"],"mappings":"AAAA;;;;AAIA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AAEA;;;;;;;;;AASA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAO;AACL;;;;;;;;;;;;;;;;;;AAkBAC,IAAAA,MAAM,EAAEH,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE;AAFa,KAAD;AAnBrB,GAAP;AAwBD;AAED;;;;;;;;AAMA,OAAO,SAASC,UAAT,CAAoBH,IAApB,EAA0BI,IAA1B,EAAgC;AACrC,MAAIC,MAAM,GAAGT,aAAa,CAACF,SAAS,CAACU,IAAD,CAAV,CAA1B;AACAP,EAAAA,kBAAkB,CAACQ,MAAD,EAASN,eAAe,CAACC,IAAD,CAAxB,CAAlB;AACA,SAAOL,SAAS,CAACU,MAAD,CAAhB;AACD","sourcesContent":["/**\n * Upload instances\n * @namespace Upload\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createDeleteEntity } from '../instance-actions';\n\n/**\n * @memberof Upload\n * @typedef {Upload} Upload\n * @prop {Object} sys - Standard system metadata with additional asset specific properties\n * @prop {string} sys.id - The id of the upload\n * @prop {function(): Promise} delete - Deletes an upload\n * @prop {function(): Object} toPlainObject - Returns this Asset as a plain JS object\n */\n\nfunction createUploadApi(http) {\n  return {\n    /**\n     * Deletes this object on the server.\n     * @memberof Upload\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUpload('<upload_id>'))\n     * .then((upload) => upload.delete())\n     * .then((upload) => console.log(`upload ${upload.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'uploads'\n    })\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw upload data\n * @return {Upload} Wrapped upload data\n */\nexport function wrapUpload(http, data) {\n  var upload = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(upload, createUploadApi(http));\n  return freezeSys(upload);\n}"]},"metadata":{},"sourceType":"module"}