{"ast":null,"code":"/**\n * Editor Interface instances\n * @namespace EditorInterface\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\n/**\n * @memberof EditorInterface\n * @typedef Control\n * @prop {srting} fieldId - the id of the customized field\n * @prop {string} widgetId - customization associated to the field\n */\n\n/**\n * @memberof EditorInterface\n * @typedef EditorInterface\n * @prop {Meta.Sys} sys - System metadata\n * @prop {EditorInterface.Control[]} controls - array of fields and it's associated widgetId\n */\n\nfunction createEditorInterfaceApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof EditorInterface\n     * @func update\n     * @return {Promise<EditorInterface>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentType('<contentType_id>'))\n     * .then((contentType) => contentType.getEditorInterface())\n     * .then((editorInterface) => {\n     *  editorInterface.controls[0] = { \"fieldId\": \"title\", \"widgetId\": \"singleLine\"}\n     *  return editorInterface.update()\n     * })\n     * .catch(console.error)\n     */\n    update: function update() {\n      var raw = this.toPlainObject();\n      var data = cloneDeep(raw);\n      delete data.sys;\n      return http.put('content_types/' + this.sys.contentType.sys.id + '/editor_interface', data, {\n        headers: {\n          'X-Contentful-Version': this.sys.version\n        }\n      }).then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * gets a control for a specific field\n     * @memberof EditorInterface\n     * @func getControlForField\n     * @return {?Object} control object for specific field.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentType('<contentType_id>'))\n     * .then((contentType) => contentType.getEditorInterface())\n     * .then((editorInterface) => {\n     *  control = editorInterface.getControlForField('<field-id>')\n     *  console.log(control)\n     * })\n     * .catch(console.error)\n     */\n    getControlForField: function getControlForField(fieldId) {\n      var result = this.controls.filter(function (control) {\n        return control.fieldId === fieldId;\n      });\n      return result && result.length > 0 ? result[0] : null;\n    }\n  };\n}\n/**\n* @private\n* @param {Object} http - HTTP client instance\n* @param {Object} data - Raw editor-interface data\n* @return {EditorInterface} Wrapped editor-interface data\n*/\n\n\nexport function wrapEditorInterface(http, data) {\n  var editorInterface = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(editorInterface, createEditorInterfaceApi(http));\n  return freezeSys(editorInterface);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/editor-interface.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","errorHandler","createEditorInterfaceApi","http","update","raw","data","sys","put","contentType","id","headers","version","then","response","wrapEditorInterface","getControlForField","fieldId","result","controls","filter","control","length","editorInterface"],"mappings":"AAAA;;;;AAKA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA;;;;;;;AAOA;;;;;;;AAOA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AACtC,SAAO;AACL;;;;;;;;;;;;;;;;;;;;;AAqBAC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,UAAIC,GAAG,GAAG,KAAKN,aAAL,EAAV;AACA,UAAIO,IAAI,GAAGT,SAAS,CAACQ,GAAD,CAApB;AACA,aAAOC,IAAI,CAACC,GAAZ;AACA,aAAOJ,IAAI,CAACK,GAAL,CAAS,mBAAmB,KAAKD,GAAL,CAASE,WAAT,CAAqBF,GAArB,CAAyBG,EAA5C,GAAiD,mBAA1D,EAA+EJ,IAA/E,EAAqF;AAC1FK,QAAAA,OAAO,EAAE;AAAE,kCAAwB,KAAKJ,GAAL,CAASK;AAAnC;AADiF,OAArF,EAEJC,IAFI,CAEC,UAAUC,QAAV,EAAoB;AAC1B,eAAOC,mBAAmB,CAACZ,IAAD,EAAOW,QAAQ,CAACR,IAAhB,CAA1B;AACD,OAJM,EAIJL,YAJI,CAAP;AAKD,KA/BI;;AAgCL;;;;;;;;;;;;;;;;;;;;;AAqBAe,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,OAA5B,EAAqC;AACvD,UAAIC,MAAM,GAAG,KAAKC,QAAL,CAAcC,MAAd,CAAqB,UAAUC,OAAV,EAAmB;AACnD,eAAOA,OAAO,CAACJ,OAAR,KAAoBA,OAA3B;AACD,OAFY,CAAb;AAGA,aAAOC,MAAM,IAAIA,MAAM,CAACI,MAAP,GAAgB,CAA1B,GAA8BJ,MAAM,CAAC,CAAD,CAApC,GAA0C,IAAjD;AACD;AA1DI,GAAP;AA4DD;AAED;;;;;;;;AAMA,OAAO,SAASH,mBAAT,CAA6BZ,IAA7B,EAAmCG,IAAnC,EAAyC;AAC9C,MAAIiB,eAAe,GAAGxB,aAAa,CAACF,SAAS,CAACS,IAAD,CAAV,CAAnC;AACAN,EAAAA,kBAAkB,CAACuB,eAAD,EAAkBrB,wBAAwB,CAACC,IAAD,CAA1C,CAAlB;AACA,SAAOL,SAAS,CAACyB,eAAD,CAAhB;AACD","sourcesContent":["/**\n * Editor Interface instances\n * @namespace EditorInterface\n */\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\n\n/**\n * @memberof EditorInterface\n * @typedef Control\n * @prop {srting} fieldId - the id of the customized field\n * @prop {string} widgetId - customization associated to the field\n */\n\n/**\n * @memberof EditorInterface\n * @typedef EditorInterface\n * @prop {Meta.Sys} sys - System metadata\n * @prop {EditorInterface.Control[]} controls - array of fields and it's associated widgetId\n */\n\nfunction createEditorInterfaceApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof EditorInterface\n     * @func update\n     * @return {Promise<EditorInterface>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentType('<contentType_id>'))\n     * .then((contentType) => contentType.getEditorInterface())\n     * .then((editorInterface) => {\n     *  editorInterface.controls[0] = { \"fieldId\": \"title\", \"widgetId\": \"singleLine\"}\n     *  return editorInterface.update()\n     * })\n     * .catch(console.error)\n     */\n    update: function update() {\n      var raw = this.toPlainObject();\n      var data = cloneDeep(raw);\n      delete data.sys;\n      return http.put('content_types/' + this.sys.contentType.sys.id + '/editor_interface', data, {\n        headers: { 'X-Contentful-Version': this.sys.version }\n      }).then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n    /**\n     * gets a control for a specific field\n     * @memberof EditorInterface\n     * @func getControlForField\n     * @return {?Object} control object for specific field.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentType('<contentType_id>'))\n     * .then((contentType) => contentType.getEditorInterface())\n     * .then((editorInterface) => {\n     *  control = editorInterface.getControlForField('<field-id>')\n     *  console.log(control)\n     * })\n     * .catch(console.error)\n     */\n    getControlForField: function getControlForField(fieldId) {\n      var result = this.controls.filter(function (control) {\n        return control.fieldId === fieldId;\n      });\n      return result && result.length > 0 ? result[0] : null;\n    }\n  };\n}\n\n/**\n* @private\n* @param {Object} http - HTTP client instance\n* @param {Object} data - Raw editor-interface data\n* @return {EditorInterface} Wrapped editor-interface data\n*/\nexport function wrapEditorInterface(http, data) {\n  var editorInterface = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(editorInterface, createEditorInterfaceApi(http));\n  return freezeSys(editorInterface);\n}"]},"metadata":{},"sourceType":"module"}