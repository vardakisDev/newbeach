{"ast":null,"code":"/**\n * Entry instances\n * @namespace Entry\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject, createRequestConfig } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createArchiveEntity, createUnarchiveEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker, createArchivedChecker } from '../instance-actions';\nimport errorHandler from '../error-handler';\nimport { wrapSnapshot, wrapSnapshotCollection } from './snapshot';\n/**\n * Types of fields found in an Entry\n * @namespace EntryFields\n */\n\n/**\n * @memberof EntryFields\n * @typedef Symbol\n * @type string\n */\n\n/**\n * @memberof EntryFields\n * @typedef Text\n * @type string\n */\n\n/**\n * @memberof EntryFields\n * @typedef Integer\n * @type number\n */\n\n/**\n * @memberof EntryFields\n * @typedef Number\n * @type number\n */\n\n/**\n * @memberof EntryFields\n * @typedef Date\n * @type string\n */\n\n/**\n * @memberof EntryFields\n * @typedef Boolean\n * @type boolean\n */\n\n/**\n * @memberof EntryFields\n * @typedef Location\n * @prop {string} lat - latitude\n * @prop {string} lon - longitude\n */\n\n/**\n * A Field in an Entry can have one of the following types that can be defined in Contentful. See <a href=\"https://www.contentful.com/developers/docs/references/field-type/\">Field Types</a> for more details.\n * @memberof EntryFields\n * @typedef Field\n * @type EntryFields.Symbol | EntryFields.Text | EntryFields.Integer | EntryFields.Number | EntryFields.Date | EntryFields.Boolean | EntryFields.Location | Meta.Link | Array<EntryFields.Symbol|Meta.Link> | Object\n */\n\n/**\n * @memberof Entry\n * @typedef Entry\n * @prop {Meta.Sys} sys - Standard system metadata with additional entry specific properties\n * @prop {Meta.Link} sys.contentType - Content Type used by this Entry\n * @prop {string=} sys.locale - If present, indicates the locale which this entry uses\n * @prop {Object<EntryFields.Field>} fields - Object with content for each field\n * @prop {function(): Object} toPlainObject() - Returns this Entry as a plain JS object\n */\n\nfunction createEntryApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Entry\n     * @func update\n     * @return {Promise<Entry>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => {\n     *   entry.fields.title['en-US'] = 'New entry title'\n     *   return entry.update()\n     * })\n     * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))\n     * .catch(console.error)\n    */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Entry\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.delete())\n     * .then(() => console.log(`Entry deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'entries'\n    }),\n\n    /**\n     * Publishes the object\n     * @memberof Entry\n     * @func publish\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.publish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} published.`))\n     * .catch(console.error)\n     */\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Unpublishes the object\n     * @memberof Entry\n     * @func unpublish\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.unpublish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unpublished.`))\n     * .catch(console.error)\n     */\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Archives the object\n     * @memberof Entry\n     * @func archive\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.archive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} archived.`))\n     * .catch(console.error)\n     */\n    archive: createArchiveEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Unarchives the object\n     * @memberof Entry\n     * @func unarchive\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.unarchive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unarchived.`))\n     * .catch(console.error)\n     */\n    unarchive: createUnarchiveEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Gets all snapshots of an entry\n     * @memberof Entry\n     * @func getSnapshots\n     * @return Promise<Snapshot>\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshots())\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     */\n    getSnapshots: function getSnapshots() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('entries/' + this.sys.id + '/snapshots', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a snapshot of an entry\n     * @memberof Entry\n     * @func getSnapshot\n     * @param {string} snapshotId - Id of the snapshot\n     * @return Promise<Snapshot>\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshot('<snapshot_id>'))\n     * .then((snapshot) => console.log(snapshot))\n     * .catch(console.error)\n     */\n    getSnapshot: function getSnapshot(snapshotId) {\n      return http.get('entries/' + this.sys.id + '/snapshots/' + snapshotId).then(function (response) {\n        return wrapSnapshot(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Checks if the entry is published. A published entry might have unpublished changes (@see {Entry.isUpdated})\n     * @memberof Entry\n     * @func isPublished\n     * @return {boolean}\n     */\n    isPublished: createPublishedChecker(),\n\n    /**\n     * Checks if the entry is updated. This means the entry was previously published but has unpublished changes.\n     * @memberof Entry\n     * @func isUpdated\n     * @return {boolean}\n     */\n    isUpdated: createUpdatedChecker(),\n\n    /**\n     * Checks if the entry is in draft mode. This means it is not published.\n     * @memberof Entry\n     * @func isDraft\n     * @return {boolean}\n     */\n    isDraft: createDraftChecker(),\n\n    /**\n     * Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.\n     * @memberof Entry\n     * @func isArchived\n     * @return {boolean}\n     */\n    isArchived: createArchivedChecker()\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw entry data\n * @return {Entry} Wrapped entry data\n */\n\n\nexport function wrapEntry(http, data) {\n  var entry = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(entry, createEntryApi(http));\n  return freezeSys(entry);\n}\n/**\n * Data is also mixed in with link getters if links exist and includes were requested\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw entry collection data\n * @return {EntryCollection} Wrapped entry collection data\n */\n\nexport function wrapEntryCollection(http, data, resolveLinks) {\n  var entries = toPlainObject(cloneDeep(data));\n  entries.items = entries.items.map(function (entity) {\n    return wrapEntry(http, entity);\n  });\n  return freezeSys(entries);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/entry.js"],"names":["cloneDeep","freezeSys","toPlainObject","createRequestConfig","enhanceWithMethods","createUpdateEntity","createDeleteEntity","createPublishEntity","createUnpublishEntity","createArchiveEntity","createUnarchiveEntity","createPublishedChecker","createUpdatedChecker","createDraftChecker","createArchivedChecker","errorHandler","wrapSnapshot","wrapSnapshotCollection","createEntryApi","http","update","entityPath","wrapperMethod","wrapEntry","delete","publish","unpublish","archive","unarchive","getSnapshots","query","arguments","length","undefined","get","sys","id","then","response","data","getSnapshot","snapshotId","isPublished","isUpdated","isDraft","isArchived","entry","wrapEntryCollection","resolveLinks","entries","items","map","entity"],"mappings":"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","sourcesContent":["/**\n * Entry instances\n * @namespace Entry\n */\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject, createRequestConfig } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createArchiveEntity, createUnarchiveEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker, createArchivedChecker } from '../instance-actions';\nimport errorHandler from '../error-handler';\nimport { wrapSnapshot, wrapSnapshotCollection } from './snapshot';\n/**\n * Types of fields found in an Entry\n * @namespace EntryFields\n */\n\n/**\n * @memberof EntryFields\n * @typedef Symbol\n * @type string\n */\n\n/**\n * @memberof EntryFields\n * @typedef Text\n * @type string\n */\n\n/**\n * @memberof EntryFields\n * @typedef Integer\n * @type number\n */\n\n/**\n * @memberof EntryFields\n * @typedef Number\n * @type number\n */\n\n/**\n * @memberof EntryFields\n * @typedef Date\n * @type string\n */\n\n/**\n * @memberof EntryFields\n * @typedef Boolean\n * @type boolean\n */\n\n/**\n * @memberof EntryFields\n * @typedef Location\n * @prop {string} lat - latitude\n * @prop {string} lon - longitude\n */\n\n/**\n * A Field in an Entry can have one of the following types that can be defined in Contentful. See <a href=\"https://www.contentful.com/developers/docs/references/field-type/\">Field Types</a> for more details.\n * @memberof EntryFields\n * @typedef Field\n * @type EntryFields.Symbol | EntryFields.Text | EntryFields.Integer | EntryFields.Number | EntryFields.Date | EntryFields.Boolean | EntryFields.Location | Meta.Link | Array<EntryFields.Symbol|Meta.Link> | Object\n */\n\n/**\n * @memberof Entry\n * @typedef Entry\n * @prop {Meta.Sys} sys - Standard system metadata with additional entry specific properties\n * @prop {Meta.Link} sys.contentType - Content Type used by this Entry\n * @prop {string=} sys.locale - If present, indicates the locale which this entry uses\n * @prop {Object<EntryFields.Field>} fields - Object with content for each field\n * @prop {function(): Object} toPlainObject() - Returns this Entry as a plain JS object\n */\n\nfunction createEntryApi(http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Entry\n     * @func update\n     * @return {Promise<Entry>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => {\n     *   entry.fields.title['en-US'] = 'New entry title'\n     *   return entry.update()\n     * })\n     * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))\n     * .catch(console.error)\n    */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Entry\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.delete())\n     * .then(() => console.log(`Entry deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'entries'\n    }),\n\n    /**\n     * Publishes the object\n     * @memberof Entry\n     * @func publish\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.publish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} published.`))\n     * .catch(console.error)\n     */\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Unpublishes the object\n     * @memberof Entry\n     * @func unpublish\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.unpublish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unpublished.`))\n     * .catch(console.error)\n     */\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Archives the object\n     * @memberof Entry\n     * @func archive\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.archive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} archived.`))\n     * .catch(console.error)\n     */\n    archive: createArchiveEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Unarchives the object\n     * @memberof Entry\n     * @func unarchive\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.unarchive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unarchived.`))\n     * .catch(console.error)\n     */\n    unarchive: createUnarchiveEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Gets all snapshots of an entry\n     * @memberof Entry\n     * @func getSnapshots\n     * @return Promise<Snapshot>\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshots())\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     */\n    getSnapshots: function getSnapshots() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return http.get('entries/' + this.sys.id + '/snapshots', createRequestConfig({ query: query })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a snapshot of an entry\n     * @memberof Entry\n     * @func getSnapshot\n     * @param {string} snapshotId - Id of the snapshot\n     * @return Promise<Snapshot>\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshot('<snapshot_id>'))\n     * .then((snapshot) => console.log(snapshot))\n     * .catch(console.error)\n     */\n    getSnapshot: function getSnapshot(snapshotId) {\n      return http.get('entries/' + this.sys.id + '/snapshots/' + snapshotId).then(function (response) {\n        return wrapSnapshot(http, response.data);\n      }, errorHandler);\n    },\n    /**\n     * Checks if the entry is published. A published entry might have unpublished changes (@see {Entry.isUpdated})\n     * @memberof Entry\n     * @func isPublished\n     * @return {boolean}\n     */\n    isPublished: createPublishedChecker(),\n\n    /**\n     * Checks if the entry is updated. This means the entry was previously published but has unpublished changes.\n     * @memberof Entry\n     * @func isUpdated\n     * @return {boolean}\n     */\n    isUpdated: createUpdatedChecker(),\n\n    /**\n     * Checks if the entry is in draft mode. This means it is not published.\n     * @memberof Entry\n     * @func isDraft\n     * @return {boolean}\n     */\n    isDraft: createDraftChecker(),\n\n    /**\n     * Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.\n     * @memberof Entry\n     * @func isArchived\n     * @return {boolean}\n     */\n    isArchived: createArchivedChecker()\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw entry data\n * @return {Entry} Wrapped entry data\n */\nexport function wrapEntry(http, data) {\n  var entry = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(entry, createEntryApi(http));\n  return freezeSys(entry);\n}\n\n/**\n * Data is also mixed in with link getters if links exist and includes were requested\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw entry collection data\n * @return {EntryCollection} Wrapped entry collection data\n */\nexport function wrapEntryCollection(http, data, resolveLinks) {\n  var entries = toPlainObject(cloneDeep(data));\n  entries.items = entries.items.map(function (entity) {\n    return wrapEntry(http, entity);\n  });\n  return freezeSys(entries);\n}"]},"metadata":{},"sourceType":"module"}