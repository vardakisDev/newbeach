{"ast":null,"code":"/**\n * UI Extension instances\n * @namespace UiExtension\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n/**\n * @memberof UiExtension\n * @typedef UiExtension\n * @prop {Meta.Sys} sys - System metadata\n * @prop {object} extension - UI Extension config\n * @prop {string} extension.name - Extension name\n * @prop {array} extension.fieldTypes - Field types where an extension can be used\n * @prop {array} extension.src - URL where the root HTML document of the extension can be found\n * @prop {array} extension.srcdoc - String representation of the extension (e.g. inline HTML code)\n * @prop {boolean} extension.sidebar - Controls the location of the extension. If true it will be rendered on the sidebar instead of replacing the field's editing control\n * @prop {function(): Object} toPlainObject() - Returns this UI Extension as a plain JS object\n */\n\nfunction createUiExtensionApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof UiExtension\n     * @func update\n     * @return {Promise<UiExtension>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtension('<ui_extension_id>'))\n     * .then((uiExtension) => {\n     *   uiExtension.extension.name = 'New UI Extension name'\n     *   return uiExtension.update()\n     * })\n     * .then((uiExtension) => console.log(`UI Extension ${uiExtension.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'extensions',\n      wrapperMethod: wrapUiExtension\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof UiExtension\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtension('<ui_extension_id>'))\n     * .then((uiExtension) => uiExtension.delete())\n     * .then(() => console.log(`UI Extension deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'extensions'\n    })\n  };\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw UI Extension data\n * @return {UiExtension} Wrapped UI Extension data\n */\n\n\nexport function wrapUiExtension(http, data) {\n  var uiExtension = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(uiExtension, createUiExtensionApi(http));\n  return freezeSys(uiExtension);\n}\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw UI Extension collection data\n * @return {UiExtensionCollection} Wrapped UI Extension collection data\n */\n\nexport function wrapUiExtensionCollection(http, data) {\n  var uiExtensions = toPlainObject(cloneDeep(data));\n  uiExtensions.items = uiExtensions.items.map(function (entity) {\n    return wrapUiExtension(http, entity);\n  });\n  return freezeSys(uiExtensions);\n}","map":{"version":3,"sources":["C:/Users/στελης/Desktop/Hotel React/resort/node_modules/contentful-management/dist/es-modules/entities/ui-extension.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createUpdateEntity","createDeleteEntity","createUiExtensionApi","http","update","entityPath","wrapperMethod","wrapUiExtension","delete","data","uiExtension","wrapUiExtensionCollection","uiExtensions","items","map","entity"],"mappings":"AAAA;;;;AAIA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AAEA;;;;;;;;;;;;;AAaA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,SAAO;AACL;;;;;;;;;;;;;;;;;;;;;AAqBAC,IAAAA,MAAM,EAAEJ,kBAAkB,CAAC;AACzBG,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE,YAFa;AAGzBC,MAAAA,aAAa,EAAEC;AAHU,KAAD,CAtBrB;;AA4BL;;;;;;;;;;;;;;;;;;AAkBAC,IAAAA,MAAM,EAAEP,kBAAkB,CAAC;AACzBE,MAAAA,IAAI,EAAEA,IADmB;AAEzBE,MAAAA,UAAU,EAAE;AAFa,KAAD;AA9CrB,GAAP;AAmDD;AAED;;;;;;;;AAMA,OAAO,SAASE,eAAT,CAAyBJ,IAAzB,EAA+BM,IAA/B,EAAqC;AAC1C,MAAIC,WAAW,GAAGZ,aAAa,CAACF,SAAS,CAACa,IAAD,CAAV,CAA/B;AACAV,EAAAA,kBAAkB,CAACW,WAAD,EAAcR,oBAAoB,CAACC,IAAD,CAAlC,CAAlB;AACA,SAAON,SAAS,CAACa,WAAD,CAAhB;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,yBAAT,CAAmCR,IAAnC,EAAyCM,IAAzC,EAA+C;AACpD,MAAIG,YAAY,GAAGd,aAAa,CAACF,SAAS,CAACa,IAAD,CAAV,CAAhC;AACAG,EAAAA,YAAY,CAACC,KAAb,GAAqBD,YAAY,CAACC,KAAb,CAAmBC,GAAnB,CAAuB,UAAUC,MAAV,EAAkB;AAC5D,WAAOR,eAAe,CAACJ,IAAD,EAAOY,MAAP,CAAtB;AACD,GAFoB,CAArB;AAGA,SAAOlB,SAAS,CAACe,YAAD,CAAhB;AACD","sourcesContent":["/**\n * UI Extension instances\n * @namespace UiExtension\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\n\n/**\n * @memberof UiExtension\n * @typedef UiExtension\n * @prop {Meta.Sys} sys - System metadata\n * @prop {object} extension - UI Extension config\n * @prop {string} extension.name - Extension name\n * @prop {array} extension.fieldTypes - Field types where an extension can be used\n * @prop {array} extension.src - URL where the root HTML document of the extension can be found\n * @prop {array} extension.srcdoc - String representation of the extension (e.g. inline HTML code)\n * @prop {boolean} extension.sidebar - Controls the location of the extension. If true it will be rendered on the sidebar instead of replacing the field's editing control\n * @prop {function(): Object} toPlainObject() - Returns this UI Extension as a plain JS object\n */\n\nfunction createUiExtensionApi(http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof UiExtension\n     * @func update\n     * @return {Promise<UiExtension>} Object returned from the server with updated changes.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtension('<ui_extension_id>'))\n     * .then((uiExtension) => {\n     *   uiExtension.extension.name = 'New UI Extension name'\n     *   return uiExtension.update()\n     * })\n     * .then((uiExtension) => console.log(`UI Extension ${uiExtension.sys.id} updated.`))\n     * .catch(console.error)\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'extensions',\n      wrapperMethod: wrapUiExtension\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof UiExtension\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtension('<ui_extension_id>'))\n     * .then((uiExtension) => uiExtension.delete())\n     * .then(() => console.log(`UI Extension deleted.`))\n     * .catch(console.error)\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'extensions'\n    })\n  };\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw UI Extension data\n * @return {UiExtension} Wrapped UI Extension data\n */\nexport function wrapUiExtension(http, data) {\n  var uiExtension = toPlainObject(cloneDeep(data));\n  enhanceWithMethods(uiExtension, createUiExtensionApi(http));\n  return freezeSys(uiExtension);\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw UI Extension collection data\n * @return {UiExtensionCollection} Wrapped UI Extension collection data\n */\nexport function wrapUiExtensionCollection(http, data) {\n  var uiExtensions = toPlainObject(cloneDeep(data));\n  uiExtensions.items = uiExtensions.items.map(function (entity) {\n    return wrapUiExtension(http, entity);\n  });\n  return freezeSys(uiExtensions);\n}"]},"metadata":{},"sourceType":"module"}